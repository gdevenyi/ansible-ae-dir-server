---
# Generate new TLS key and fetch the CSR to local file (to be submitted to signing CA)

- name: "Generate new TLS server key pair"
  command: "{{ openssl_exec }} req -config {{ aedir_etc }}/tls/gen_csr.cnf -batch -new -nodes -subj \"{{ openldap_csr_subjectdn }}\" -out {{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr -keyout {{ openldap_key_pathname }}"

- name: "Modulus of CSR {{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr"
  command: "{{ openssl_exec }} req -in {{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr -noout -modulus"
  register: gencsr_csr_modulus

- name: "Modulus of key {{ openldap_key_pathname }}"
  command: "{{ openssl_exec }} rsa -in {{ openldap_key_pathname }} -noout -modulus"
  register: gencsr_key_modulus

- name: "Compare modulus of new CSR and key"
  fail:
    msg: "Different modulus after key-gen of CSR {{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr and {{ openldap_key_pathname }}"
  when: gencsr_csr_modulus.stdout != gencsr_key_modulus.stdout

- name: "Fetch CSR file {{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr to {{ local_openldap_csr_dir }}/{{ openldap_service_fqdn }}.csr"
  fetch:
    src: "{{ aedir_etc }}/tls/{{ openldap_service_fqdn }}.csr"
    dest: "{{ local_openldap_csr_dir }}/{{ openldap_service_fqdn }}.csr"
    flat: yes

- name: "Abort for CSR signing by CA"
  fail:
    msg: "now send {{ local_openldap_csr_dir }}/{{ openldap_service_fqdn }}.csr to your CA to be signed"

---
# main tasks file for roles/aedir_server

# get root user info
- name: "getent passwd aehostd"
  getent:
    database: passwd
    key: aehostd
  ignore_errors: yes
  tags:
    - always

- debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - lsb_id
    - inventory_dir
    - playbook_dir
    - role_path
    - openldap_role
    - aedir_db_params
    - aedir_hosts
    - aedir_files_dirs
    - aedir_templates_dirs
    - aedir_replicas_restrictions
    - getent_passwd.aehostd
  tags:
    - always

- debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - aedir_providers_restrictions
    - aedir_cron_minutes
    - aedir_cron_offset
  when: openldap_role == 'provider'
  tags:
    - always

- name: "Forced stop of all services"
  service:
    name: "{{ item }}"
    state: stopped
  ignore_errors: yes
  when: aedir_stop is defined
  loop:
    - ae-dir-pwd
    - "{{ openldap_service_name }}"
    - ae-apache
    - "{{ oath_bind_listener }}"
    - oathenroll
    - web2ldap

- name: "Include OS-specific variables"
  include_vars:
    file: "{{ lsb_id }}.yml"
  tags:
    - always

- debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - aedir_python
    - aedir_cron_file
  tags:
    - always

- name: "Store Python interpreter used for ansible modules as host fact"
  set_fact:
    cacheable: yes
    aedir_python3: "{{ aedir_python.split(' ', 1)[0] }}"
  tags:
    - always

- debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - aedir_python3
  tags:
    - always

- name: "OS base configuration"
  include_tasks: "baseos_{{ lsb_id }}.yml"

- block:
    - name: "Install AppArmor packages"
      include_tasks: "apparmor.yml"
      when: apparmor_enabled == True
  tags:
    - aedir_apparmor

- block:
  - name: "Install OpenLDAP packages"
    include_tasks: "install_openldap_{{ lsb_id }}.yml"
  tags:
    - aedir_slapd

- name: "Install apache2 on {{ lsb_id }}"
  include_tasks: "install_apache2_{{ lsb_id }}.yml"
  when: openldap_role == 'provider'

- block:

    - name: "Create directory structure {{ aedir_prefix }}"
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
      loop:
        - "{{ aedir_etc }}"
        - "{{ aedir_bin }}"
        - "{{ aedir_sbin }}"

    - name: "Create file /etc/tmpfiles.d/ae-dir.conf from template"
      template:
        src: "tmpfiles-ae-dir.conf.j2"
        dest: "/etc/tmpfiles.d/ae-dir.conf"
        owner: root
        group: root
        mode: 0o0644
      when: aedir_service_manager == "systemd" and aedir_rundir.startswith("/run")

    - name: "Create directory structure {{ aedir_rundir }}"
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0o0755
      loop:
        - "{{ aedir_rundir }}"
      when: aedir_service_manager != "systemd" or not aedir_rundir.startswith("/run")

  tags:
    - aedir_tools

- block:
    - name: "Add system accounts"
      include_tasks: system_accounts.yml
  tags:
    - aedir_tools

- block:
    - name: "Configure OpenLDAP slapd for AE-DIR"
      include_tasks: configure_slapd.yml
  tags:
    - aedir_slapd

- block:
    - name: "Install various AE-DIR tools"
      include_tasks: aedir_tools.yml
  tags:
    - aedir_tools

- block:
    - name: "TLS configuration for OpenLDAP slapd"
      include_tasks: tls_files.yml
  tags:
    - aedir_tlsfiles

- block:
    - name: "Specific AE-DIR tool tasks on {{ lsb_id }}"
      include_tasks: "aedir_tools_{{ lsb_id }}.yml"
  tags:
    - aedir_tools

- block:
    - name: "Specific AE-DIR tool tasks"
      include_tasks: "aedir_tools_{{ openldap_role }}.yml"
  tags:
    - aedir_tools

- block:
    - name: "AE-DIR web pages {{ openldap_role }}"
      include_role:
        name: aedir_htdocs
      vars:
        db_suffix: "{{ aedir_db_params.um.suffix }}"
        document_root: "{{ aedir_htdocsdir }}"
        htdocs_templates: "{{ aedir_htdocs_templates }}"
        htdocs_layout: "{{ aedir_htdocs_layout }}"
        news: "{{ aedir_news }}"
      when: openldap_role=="provider"
  tags:
    - aedir_htdocs

- block:
    - name: "Configure apache2"
      include_tasks: "configure_apache2.yml"
      when: openldap_role == 'provider'
  tags:
    - aedir_httpd

- block:
    - name: "Install AE-DIR password service (ae-dir-pwd)"
      include_tasks: "pwd.yml"
      when: openldap_role=="provider"
  tags:
    - aedir_pwd

- block:
    - name: "Install and configure web2ldap"
      include_tasks: "web2ldap.yml"
      when: openldap_role=="provider"
  tags:
    - aedir_web2ldap

- block:
    - name: "OATH-LDAP tasks"
      include_tasks: "oath_ldap.yml"
      when: oath_ldap_enabled == True
  tags:
    - aedir_oath

- block:
    - name: "OATH-LDAP enrollment web app"
      include_tasks: "oathenroll.yml"
      when: oath_ldap_enabled == True and openldap_role=="provider"
  tags:
    - aedir_oath
    - aedir_oathenroll

- block:
    - name: "EKCA tasks"
      include_tasks: "ekca.yml"
      when: ekca_enabled == True and openldap_role=="provider"
  tags:
    - aedir_ekca

- block:
    - name: "Password sync tasks"
      include_tasks: "pwsync.yml"
      when:
        - openldap_role=="provider"
        - aedir_pwsync_targeturl is defined
  tags:
    - aedir_pwsync

- block:
    - name: "Monitoring scripts"
      include_tasks: "monitoring.yml"
  tags:
    - aedir_monitoring

- block:
    - name: "Install CRON jobs"
      include_tasks: "cron.yml"
  tags:
    - aedir_cron

- block:
    - name: "Services"
      include_tasks: "services.yml"
  tags:
    - aedir_services

- block:

  - name: "Extract subject DN of server cert"
    command: "openssl x509 -in {{ openldap_cert_filename }} -noout -nameopt rfc2253 -subject"
    delegate_to: 127.0.0.1
    become: no
    register: openldap_cert_subject

  - name: "Store subject DN of server cert as host fact"
    set_fact:
      cacheable: yes
      openldap_cert_subject: "{{ openldap_cert_subject.stdout[8:] }}"

  - name: "Tasks for loading initial data"
    include_tasks: "aedir_init.yml"
    when: aedir_init is defined and openldap_role == "provider"

  - name: "Init aeHost entry on {{ aedir_init_user}}@{{ aedir_main_provider_hostname }}"
    aehost:
      name: "{{ inventory_hostname }}"
      state: "{{ aedir_aehost_state }}"
      ldapurl: "{{ openldap_ldapi_uri }}"
      srvgroup: "{{ aedir_srvgroup }}"
      description: "AE-DIR {{ openldap_role }} host {{ openldap_service_fqdn }}"
      ticket_id: "{{ aedir_init_ticket_id }}"
      ppolicy: "cn=ppolicy-systems,cn=ae,{{ aedir_db_params.um.suffix }}"
      askotp: "no"
    vars:
      ansible_ssh_user: "{{ aedir_init_user }}"
      ansible_python_interpreter: "{{ hostvars[aedir_main_provider_hostname].aedir_python3|default(aedir_python3) }}"
    delegate_to: "{{ aedir_main_provider_hostname }}"
    become: "{{ aedir_init_become }}"
    register: aehost_result

  - name: "Update aeService entries for local system accounts via {{ aedir_init_user}}@{{ aedir_main_provider_hostname }}"
    aeservice:
      name: "{{ item.value.cn }}"
      state: "present"
      ldapurl: "{{ openldap_ldapi_uri }}"
      object_classes:
        - account
        - aeObject
        - aeService
        - posixAccount
      uid: "{{ item.key }}"
      description: "{{ item.value.description }}"
      zone: "ae"
      uid_number: "{{ item.value.uid_number|int }}"
      gid_number: "{{ item.value.gid_number|int }}"
      ppolicy: "cn=ppolicy-sasl-external,cn=ae,{{ aedir_db_params.um.suffix }}"
      login_shell: "{{ aedir_nologin_shell }}"
      home_directory: "{{ aedir_rundir+'/'+item.key }}"
      ticket_id: "{{ aedir_init_ticket_id }}"
      groups: "{{ item.value.get('groups', []) }}"
    with_dict:
      "{{ aedir_ldapi_services }}"
    vars:
      ansible_ssh_user: "{{ aedir_init_user }}"
      ansible_python_interpreter: "{{ hostvars[aedir_main_provider_hostname].aedir_python3|default(aedir_python3) }}"
    run_once: yes
    delegate_to: "{{ aedir_main_provider_hostname }}"
    become: "{{ aedir_init_become }}"

  - name: "Init aeService entry via {{ aedir_main_provider_hostname }}"
    aeservice:
      name: "ae-dir-slapd_{{ openldap_service_fqdn }}"
      state: "present"
      ldapurl: "{{ openldap_ldapi_uri }}"
      object_classes:
        - account
        - aeObject
        - aeService
        - posixAccount
      host: "{{ inventory_hostname }}"
      zone: "ae"
      description: "AE-DIR slapd {{ openldap_role }} {{ openldap_service_fqdn }} running on {{ inventory_hostname }}"
      ticket_id: "{{ aedir_init_ticket_id }}"
      ppolicy: "cn=ppolicy-sasl-external,cn=ae,{{ aedir_db_params.um.suffix }}"
      see_also: "{{ hostvars[inventory_hostname].openldap_cert_subject }}"
      login_shell: "{{ aedir_nologin_shell }}"
      groups:
        - "ae-replicas"
        - "{{ 'ae-providers' if openldap_role == 'provider' else None }}"
    vars:
      ansible_ssh_user: "{{ aedir_init_user|default(omit) }}"
      ansible_python_interpreter: "{{ hostvars[aedir_main_provider_hostname].aedir_python3|default(aedir_python3) }}"
    delegate_to: "{{ aedir_main_provider_hostname }}"
    become: "{{ aedir_init_become }}"
    register: aeservice_result
    notify:
      - "restart {{ openldap_service_name }}"

  - name: "Wait for replication of changes"
    pause:
      seconds: 5
    when: aehost_result.changed or aeservice_result.changed

  - block:

    - name: "Init aehostd with a SSH ping"
      connection: "ssh"
      remote_user: "aehost-init"
      vars:
        ansible_password: "{{ aehost_result.password }}"
        ansible_ssh_args: "-o PasswordAuthentication=yes -o RequestTTY=no -o PreferredAuthentications=password"
      ping:
        data: "pong"
      become: no
      ignore_unreachable: yes

    - name: "Wait aehostd refresh"
      pause:
        seconds: 6

    - name: "Normal SSH ping"
      ping:
        data: "pong"
      become: no

    when: aehost_result.changed and aehost_result.password

  tags:
    - aedir_init

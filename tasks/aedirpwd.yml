---
# Install AE-DIR password service (aedirpwd)

- name: "Create directories for aedirpwd"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  with_items:
    - "{{ aedir_etc }}/aedirpwd"
    - "{{ aedir_etc }}/aedirpwd/templates"
    - "{{ aedir_etc }}/aedirpwd/templates/en"

- name: "copy aedirpwd HTML templates to {{ aedir_etc }}/aedirpwd/templates"
  copy:
    src: "aedirpwd/templates/"
    dest: "{{ aedir_etc }}/aedirpwd/templates"
    follow: no
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    directory_mode: u=rwx,g=rx,o=rx

- name: "Create aedirpwd_cnf.py"
  template:
    src: "{{ item }}"
    dest: "{{ aedir_etc }}/aedirpwd/aedirpwd_cnf.py"
    owner: root
    group: root
    mode: 0644
  with_first_found:
    - files:
       - "aedirpwd/aedirpwd_cnf.py.j2"
      paths: "{{ aedir_templates_dirs }}"
  notify:
    - "restart aedirpwd"

- name: "Install password service web application"
  copy:
    src: "aedirpwd/aedirpwd_web.py"
    dest: "{{ aedir_python_sitepackages }}/aedirpwd_web.py"
    owner: root
    group: root
    mode: 0644
  notify:
    - "restart aedirpwd"

- name: "Install password service CRON scripts"
  copy:
    src: "aedirpwd/{{ item }}"
    dest: "{{ aedir_sbin }}/{{ item }}"
    owner: root
    group: "{{ aedirpwd_web_group }}"
    mode: 0750
  with_items:
    - aedirpwd_cron.py
    - aedirpwd_expiry_check.py

- name: "Create UWSGI socket directory for aedirpwd"
  file:
    path: "{{ aedir_rundir }}/uwsgi/aedirpwd"
    state: directory
    owner: ae-dir-pwd
    group: ae-dir-httpd
    mode: u=rwx,g=rx,o=
  notify:
    - "restart aedirpwd"

- name: "Create uwsgi.ini for aedirpwd"
  template:
    src: "uwsgi.ini.j2"
    dest: "{{ aedir_etc }}/uwsgi/{{ name }}.ini"
    owner: root
    group: root
    mode: 0644
  vars:
    name: aedirpwd
    socket_port: "{{ '8081' if aedir_uwsgi_usetcp else '' }}"
    user: ae-dir-pwd
    module: "aedirpwd_web:application"
    master: "true"
    processes: 10
    threads: 0
    stats_port: 9092
    buffer_size: "{{ aedir_uwsgi_params.aedirpwd.buffer_size }}"
    harakiri: "{{ aedir_uwsgi_params.aedirpwd.harakiri }}"
  notify:
    - "restart aedirpwd"

- name: Install systemd unit file from template
  template:
    src: "aedirpwd/aedirpwd.service.j2"
    dest: "{{ aedir_systemd_dir }}/aedirpwd.service"
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - "restart aedirpwd"
  when: aedir_service_manager=="systemd"

- name: "Create AppArmor profile for aedirpwd"
  template:
    src: "apparmor/uwsgi-python.j2"
    dest: "{{ apparmor_profiles_dir }}/aedirpwd"
    owner: root
    group: root
    mode: 0644
  vars:
    name: aedirpwd
  notify:
    - "restart apparmor"
    - "restart aedirpwd"
  when: apparmor_enabled == True

- name: "set env var PYTHONPATH={{ aedir_etc }}/aedirpwd in /etc/cron.d/aedirpwd"
  cron:
    env: yes
    name: "PYTHONPATH"
    value: "{{ aedir_etc }}/aedirpwd"
    state: present
    user: ae-dir-pwd
    cron_file: aedirpwd

- name: Run aedirpwd_cron as CRON job
  cron:
    name: "aedirpwd_cron"
    state: present
    user: ae-dir-pwd
    cron_file: aedirpwd
    minute: "*/2"
    job: "{{ aedir_python }} {{ aedir_sbin }}/aedirpwd_cron.py"

- name: "Run aedirpwd_expiry_check as CRON job"
  cron:
    name: "aedirpwd_expiry_check"
    state: present
    user: ae-dir-pwd
    cron_file: aedirpwd
    hour: "0"
    minute: "0"
    job: "{{ aedir_python }} {{ aedir_sbin }}/aedirpwd_expiry_check.py"

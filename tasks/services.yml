---

# disable unwanted services

- name: "Disable and stop uwsgi"
  service:
    name: uwsgi
    state: stopped
    enabled: no
  ignore_errors: yes
  when: aedir_service_manager != "systemd"

- block:
  - name: "Disable and stop uwsgi.service"
    systemd:
      name: uwsgi
      state: stopped
      enabled: no
    ignore_errors: yes
  - name: "Mask systemd unit for uwsgi.service"
    systemd:
      name: uwsgi
      masked: yes
    ignore_errors: yes
  when: aedir_service_manager == "systemd"

# enable running services

- block:
  - name: "Ensure AppArmor service is running"
    service:
      name: "apparmor"
      state: started
      enabled: yes
  - name: "Restart AppArmor service to reload profiles"
    service:
      name: "apparmor"
      state: restarted
  when: apparmor_enabled == True

- name: "Make sure systemd unit files are reloaded"
  systemd:
    daemon_reload: yes
  when: aedir_service_manager == "systemd"

- name: "Enable and start service {{ openldap_service_name }}"
  service:
    name: "{{ openldap_service_name }}"
    state: started
    enabled: yes

- name: "Enable and start service {{ oath_bind_listener }}"
  service:
    name: "{{ oath_bind_listener }}"
    state: started
    enabled: yes
  when: oath_ldap_enabled == True

- block:

  - name: "Ensure {{ cron_service_name }} is running"
    service:
      name: "{{ cron_service_name }}"
      state: started
      enabled: yes

  - name: "Ensure ae-apache is running"
    service:
      name: "ae-apache"
      state: started
      enabled: yes

  - name: "Ensure web2ldap is running"
    service:
      name: "web2ldap"
      state: started
      enabled: yes

  - name: "Ensure ae-dir-pwd is running"
    service:
      name: "ae-dir-pwd"
      state: started
      enabled: yes

  - name: "Ensure pwsync is running"
    service:
      name: "pwsync"
      state: started
      enabled: yes
    when: aedir_pwsync_targeturl != ""

  - name: "ensure oathenroll is running"
    service:
      name: "oathenroll"
      state: started
      enabled: yes
    when: oath_ldap_enabled == True

  when: openldap_role == "provider"

############################################################################
# OpenLDAP configuration for AE-DIR {{ openldap_role }}
# This file MUST NOT be world-readable!
# {{ ansible_managed }}
############################################################################

{% include 'global.conf.j2' %}

{% include 'config.conf.j2' %}

{% if aedir_accesslog_suffix %}
{% include 'accesslog.conf.j2' %}
{% endif %}

{% include 'um/general.conf.j2' %}

{% include 'um/indices.conf.j2' %}

# {{ openldap_role }} special indices

# general eq-only indexes
index mailLocalAddress eq
index mailRoutingAddress eq

{% include 'um/limits.conf.j2' %}

#---------------------------------------------------------------------------
# access control rules for {{ aedir_suffix }}
#---------------------------------------------------------------------------

# First disallow non-active entities to proceed to rest of ACLs
# by allowing only auth
# This purposely also affects open LDAP connections!
#------------------------------------------------------------------

# block access to all other stuff (except userPassword)
access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=!simpleSecurityObject
    by set="user/aeStatus & [0]" break
    by * auth

# give read access to pseudo-attribute 'entry' in database
# naming context to all users and stop further ACL processing
access to
  dn.base="{{ aedir_suffix }}"
  attrs=entry
    by users read
    by * none

# Access to userPassword
#------------------------------------------------------------------

# Entities may authenticate via LDAP simple bind with userPassword if:
# - in active state
# - not associated with a OATH-LDAP token
# - UID and GID not outside specified ID ranges
access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=userPassword
  filter="(&(aeStatus=0)(|(objectClass=aeUser)(objectClass=aeHost)(objectClass=aeService))(!(|(uidNumber<={{ aedir_min_gid-1 }})(gidNumber<={{ aedir_min_gid-1 }})(uidNumber>={{ aedir_max_uid+1 }})(gidNumber>={{ aedir_max_gid+1 }}))))"
    by anonymous auth
    by * none

# no access to userPassword as last catch
access to
  attrs=userPassword
    by * none

# Limit proxy authorization by granting access to 'authzTo'
# Ensure that no other entity has =x privilege!
#---------------------------------------------------------------------------

access to
  dn.onelevel="cn=ae,{{ aedir_suffix }}"
  attrs=authzTo
  filter="(&(objectClass=aeService)(aeStatus=0)(memberOf=cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}))"
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" =csrw
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" =csr
    by set="user/memberOf & ([cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}])" read
    by * none

access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=authzTo,authzFrom
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" =csrz
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" =csr
    by * none

#---------------------------------------------------------------------------
# General ACLs
# This MUST be below ACLs for password attrs!
#---------------------------------------------------------------------------

# Global first-catch ACLs which fire no matter what else happens afterwards...
# AE admins can manage everything else, AE auditors can read everything else
access to
  dn.subtree="{{ aedir_suffix }}"
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" read
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" read
    by * none break

# Inactive entries not visible to normal users/systems from here
access to
  filter="(|(aeStatus=-1)(aeStatus=1)(aeStatus=2))"
    by * none

# block cross-zone access to zone 'ae'
access to
  dn.subtree="cn=ae,{{ aedir_suffix }}"
    by dn.subtree="cn=ae,{{ aedir_suffix }}" none break
    by * auth

# Public entries
access to
  dn.subtree="cn=pub,{{ aedir_suffix }}"
  attrs=entry,entryDN,entryUUID,children,objectClass,hasSubordinates,modifyTimestamp,cn,description,@namedObject,@posixGroup,@sudoRole,@DUAConfigProfile,@pkiCA
    by users read

#------------------------------------------------------------------
# Access to active zones is stripped down to reviewing all entries within
# a zone by the zone admins/auditors
#------------------------------------------------------------------

access to
  dn.regex="^.*cn=({{ aedir_aezone_cn_regex }}),{{ aedir_suffix }}$"
    by set.expand="user & [cn=${d1},{{ aedir_suffix }}]/aeZoneAdmins/member" read
    by set.expand="user & [cn=${d1},{{ aedir_suffix }}]/aeZoneAuditors/member" read
    by * none break

{% include 'service_access.conf.j2' %}

# Last catch ACLs
#------------------------------------------------------------------

access to
  dn.base="{{ aedir_suffix }}"
  attrs=children,objectClass,ou,description
    by users read
    by * auth

access to
  dn.subtree="{{ aedir_suffix }}"
    by users search
    by * auth

#---------------------------------------------------------------------------
# overlays used within {{ aedir_suffix }}
#---------------------------------------------------------------------------

# for counting search results without retrieving them
overlay noopsrch

# for dereferencing attributes
overlay deref

{% if aedir_accesslog_suffix %}
# Where to log LDAP write operations (for auditing)
overlay accesslog
logdb "{{ aedir_accesslog_suffix }}"
logops writes
logold "(objectClass=*)"
logoldattr entryUUID objectClass cn uid
logpurge {{ openldap_log_purge }}
{% endif %}

# for back-links to group entries in member entries
overlay memberof
memberof-group-oc groupOfEntries
memberof-member-ad member
memberof-memberof-ad memberOf
memberof-dangling ignore
memberof-refint true

{% if oath_ldap_enabled==True %}
# pass bind requests to external listener process receiving the requests
# on Unix Domain socket path {{ oath_ldap_socket_path }}
# (after password policy check in slapo-ppolicy)
overlay sock
extensions binddn peername ssf connid
socketpath {{ oath_ldap_socket_path }}
sockops bind
{% if oath_ldap_dn_regex %}
sockdnpat "{{ oath_ldap_dn_regex }}"
{% endif %}
{% endif %}

# password policy overlay
# (after bind-DN rewriting with slapo-rwm)
overlay ppolicy
# the default password policy is deliberatly unusable
ppolicy_default cn=ppolicy-default,cn=ae,{{ aedir_suffix }}
ppolicy_hash_cleartext
ppolicy_use_lockout

# Record last bind in user entry
overlay lastbind

{% include 'slapo-rwm.conf.j2' %}

#---------------------------------------------------------------------------
# replication of {{ aedir_suffix }}
#---------------------------------------------------------------------------

# syncrepl-Overlay
overlay syncprov
{% if openldap_db_params.um.syncprov_checkpoint %}
syncprov-checkpoint {{ openldap_db_params.um.syncprov_checkpoint }}
{% endif %}
syncprov-nopresent FALSE
syncprov-reloadhint FALSE

{% for provider_replica in openldap_syncrepl_providers %}
syncrepl rid=0{{ loop.index }}
  provider=ldaps://{{ hostvars[provider_replica].get('openldap_service_fqdn',provider_replica) }}
  type=refreshAndPersist
  network-timeout={{ openldap_syncrepl_network_timeout }}
  timeout={{ openldap_syncrepl_timeout }}
  sizelimit=unlimited
  timelimit=unlimited
  interval=00:00:01:00
  retry="30 +"
  keepalive=240:10:30
  searchbase="{{ aedir_suffix }}"
  filter="(objectClass=*)"
  scope=sub
  schemachecking=on
  bindmethod=sasl
  saslmech=EXTERNAL
  tls_cacert={{ openldap_cacert_pathname }}
  tls_cert={{ openldap_cert_pathname }}
  tls_key={{ openldap_key_pathname }}
  tls_protocol_min={{ openldap_syncrepl_tls_protocol_min }}
  tls_cipher_suite={{ openldap_syncrepl_tls_cipher_suite }}

{% endfor %}

{% include 'monitor.conf.j2' %}

############################################################################
# OpenLDAP configuration for AE-DIR {{ openldap_role }}
# This file MUST NOT be world-readable!
# {{ ansible_managed }}
############################################################################

{% include 'global.conf.j2' %}

{% include 'config.conf.j2' %}

{% include 'accesslog.conf.j2' %}

#######################################################################
# Database for {{ aedir_suffix }}
#######################################################################

database mdb

suffix "{{ aedir_suffix }}"
directory {{ openldap_data }}/um

require strong

# Always set rootdn since needed by internally writing overlays
rootdn "cn=root,{{ aedir_suffix }}"
# rootpw not needed in production!
#rootpw donotenable!!!
access to
  dn.base="cn=root,{{ aedir_suffix }}"
    by * none

lastmod on

# database parameters
maxsize {{ openldap_db_um_maxsize }}
dbnosync
checkpoint 20000 1
envflags writemap

#---------------------------------------------------------------------------
# Index configuration
#---------------------------------------------------------------------------

# general eq-only indexes

index objectClass eq
index uid eq
index uidNumber eq
index gidNumber eq
index member eq
index memberUid eq
index memberOf eq
index sudoUser pres,eq
index seeAlso eq
index modifyTimestamp eq
index nickName eq
index mailLocalAddress eq
index mailRoutingAddress eq
# mainly for syncrepl
index entryCSN eq
index entryUUID eq

# for host and network management
index macAddress eq
index ipHostNumber eq,pres
index host sub,eq
index aeFqdn sub,eq,pres

# for aeUser
index aeRemoteHost pres,eq

# sub and eq indexes
index cn sub,eq
index mail sub,eq

# server groups
index aeLoginGroups eq
index aeVisibleGroups eq
index aeVisibleSudoers eq
index aeProxyFor pres,eq
index aeSSHProxyCommand pres,eq,sub

# service attributes
index aeHost eq

# login-related attributes
index authTimestamp pres,eq
index pwdChangedTime pres,eq
index pwdFailureTime pres,eq

# for person/employee references
index aePerson eq

# Meta data
index aeTicketId eq
index aeTag eq,sub

# hardware devices
index serialNumber eq,sub
index aeHwSerialNumber eq,sub

#---------------------------------------------------------------------------
# search/time limits for {{ aedir_suffix }}
#---------------------------------------------------------------------------

# Maximum number of entries to return from a search operation
sizelimit {{ openldap_sizelimit }}

# Maximum number of time [secs] slapd will spend answering a search request
timelimit {{ openldap_timelimit }}

# no limits for AE admins
limits
  group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}"
    time=unlimited
    size=unlimited

# no limits for AE auditors
limits
  group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}"
    time=unlimited
    size=unlimited

# no limits for all zone admins
limits
  group/aeGroup/member="cn=ae-all-zone-admins,cn=ae,{{ aedir_suffix }}"
    time=unlimited
    size=unlimited

# no limits for all zone auditors
limits
  group/aeGroup/member="cn=ae-all-zone-auditors,cn=ae,{{ aedir_suffix }}"
    time=unlimited
    size=unlimited

#---------------------------------------------------------------------------
# Access control rules for {{ aedir_suffix }}
#---------------------------------------------------------------------------

# First disallow non-active entities to proceed to rest of ACLs
# by allowing only auth
# This purposely also affects open LDAP connections!
#------------------------------------------------------------------

# block access to all other stuff (except userPassword)
access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=!simpleSecurityObject
    by set="user/aeStatus & [0]" break
    by * auth

# give read access to pseudo-attribute 'entry' in database
# naming context to all users and stop further ACL processing
access to
  dn.base="{{ aedir_suffix }}"
  attrs=entry
    by users read
    by * none

# Access to userPassword
#------------------------------------------------------------------

# Entities may authenticate via LDAP simple bind with userPassword if:
# - in active state
# - not associated with a OATH-LDAP token
# - UID and GID not outside specified ID ranges
access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=userPassword
  filter="(&(aeStatus=0)(|(objectClass=aeUser)(objectClass=aeHost)(objectClass=aeService))(!(|(uidNumber<={{ aedir_min_gid-1 }})(gidNumber<={{ aedir_min_gid-1 }})(uidNumber>={{ aedir_max_uid+1 }})(gidNumber>={{ aedir_max_gid+1 }}))))"
    by anonymous auth
    by * none

# no access to userPassword as last catch
access to
  attrs=userPassword
    by * none

# Limit proxy authorization by granting access to 'authzTo'
# Ensure that no other entity has =x privilege!
#---------------------------------------------------------------------------

access to
  dn.onelevel="cn=ae,{{ aedir_suffix }}"
  attrs=authzTo
  filter="(&(objectClass=aeService)(aeStatus=0)(memberOf=cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}))"
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" =csrw
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" =csr
    by set="user/memberOf & ([cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}])" read
    by * none

access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=authzTo,authzFrom
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" =csrz
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" =csr
    by * none

#---------------------------------------------------------------------------
# General ACLs
# This MUST be below ACLs for password attrs!
#---------------------------------------------------------------------------

# Global first-catch ACLs which fire no matter what else happens afterwards...
# AE admins can manage everything else, AE auditors can read everything else
access to
  dn.subtree="{{ aedir_suffix }}"
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ aedir_suffix }}" read
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ aedir_suffix }}" read
    by * none break

# Inactive entries not visible to normal users/systems from here
access to
  filter="(|(aeStatus=-1)(aeStatus=1)(aeStatus=2))"
    by * none

# block cross-zone access to zone 'ae'
access to
  dn.subtree="cn=ae,{{ aedir_suffix }}"
    by dn.subtree="cn=ae,{{ aedir_suffix }}" none break
    by * auth

# Public entries
access to
  dn.subtree="cn=pub,{{ aedir_suffix }}"
  attrs=entry,entryDN,entryUUID,children,objectClass,hasSubordinates,modifyTimestamp,cn,description,@namedObject,@posixGroup,@sudoRole,@DUAConfigProfile,@pkiCA
    by users read

#------------------------------------------------------------------
# Access to active zones is stripped down to reviewing all entries within
# a zone by the zone admins/auditors
#------------------------------------------------------------------

access to
  dn.regex="^.*cn=({{ aedir_aezone_cn_regex }}),{{ aedir_suffix }}$"
    by set.expand="user & [cn=${d1},{{ aedir_suffix }}]/aeZoneAdmins/member" read
    by set.expand="user & [cn=${d1},{{ aedir_suffix }}]/aeZoneAuditors/member" read
    by * none break

# Read acess to user, contacts, group and sudoers entries
#------------------------------------------------------------------

access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=groupOfEntries)"
  attrs=entry,entryDN,entryUUID,objectClass,structuralObjectClass,aeStatus,modifyTimestamp,cn,gidNumber
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeVisibleGroups & this" read
    by set="this/member & user" read
    by * none break

access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=groupOfEntries)"
  attrs=member
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeVisibleGroups & this" read
    by dnattr=member selfread
    by * auth

access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=posixGroup)"
  attrs=memberUid
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeVisibleGroups & this" read
    by * none break
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=posixGroup)"
  attrs=memberUid
  val.regex="^(.+)$"
    by set.expand="user/uid & [${v1}]" read
    by * none break

access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=nisMailAlias)"
  attrs=mail,rfc822MailMember,displayName
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeDisplayNameGroups & this" read
    by * none break
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=nisMailAlias)"
  attrs=rfc822MailMember
  val.regex="^(.+)$"
    by set.expand="user/mail & [${v1}]" read
    by * none break

# Give read access to SUDO rules to servers
access to
  dn.subtree="{{ aedir_suffix }}"
  attrs=entry,entryDN,entryUUID,objectClass,structuralObjectClass,aeStatus,modifyTimestamp,@sudoRole
  filter="(objectClass=sudoRole)"
    by set="user/-1/aeVisibleSudoers & this" read
    by set="{{ aedir_who_srvgroup }}/aeVisibleSudoers & this" read
    by * none

# Grant read access to personal names and e-mail addresses for services/hosts
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(|(objectClass=aeUser)(objectClass=aeService)(objectClass=aeContact))"
  attrs=cn,mail,mailLocalAddress,givenName,sn,displayName
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeDisplayNameGroups & this/memberOf" read
    by * none break

# Grant read access to aeContact entries for services/hosts
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeContact)"
  attrs=entry,entryDN,entryUUID,objectClass,structuralObjectClass,aeStatus,modifyTimestamp,cn,mail,mailLocalAddress,displayName
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeDisplayNameGroups & this/memberOf" read
    by * none break

# Give read access to SSH keys, X.509 cert and loginShell to servers which
# shall allow login for the user's groups
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=posixAccount)"
  attrs=sshPublicKey,userCertificate,loginShell,aeRemoteHost,aeSSHPermissions
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeLoginGroups & this/memberOf" read
    by * none break

# Read access to server groups filtered by (objectClass=aeSrvGroup)
#------------------------------------------------------------------

# Read access to aeSetupGroups in aeSrvGroup entries
# - for proxies
# - if setup group is also in login groups
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeSrvGroup)"
  attrs=aeSetupGroups
  val.regex="^(.+)$"
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set.expand="{{ aedir_who_srvgroup }}/aeLoginGroups & [${v1}]" read
    by * none break

# Read access to some attrs of aeSrvGroup entries
# 1. for subordinate aeHost entries
# 2. for proxy aeSrvGroup/aeHost entries
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeSrvGroup)"
  attrs=entry,entryDN,entryUUID,objectClass,structuralObjectClass,aeStatus,aeVisibleGroups,aeVisibleSudoers,aeLogStorePeriod,aeLoginGroups,aeLogStoreGroups
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by self.level{1} read
    by * none break

# Read access to server entries filtered by (objectClass=aeHost)
#------------------------------------------------------------------

access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeHost)"
  attrs=entry,objectClass,structuralObjectClass,aeStatus,cn,host,aeSrvGroup
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by self read
    by * none break

# Read access to network device entries filtered by (objectClass=aeNwDevice)
#------------------------------------------------------------------

{% if aedir_aenwdevice_visibility_set %}
# aeNwDevice entries can be read by some aeHost entries
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(&(objectClass=aeNwDevice)(aeFqdn=*)(ipHostNumber=*))"
  attrs=entry,entryDN,entryUUID,objectClass,aeFqdn,ipHostNumber
    by set="{{ aedir_aenwdevice_visibility_set }}" read
    by * none break
{% endif %}

# aeNwDevice entries have to be subordinate entries of aeHost entries
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeNwDevice)"
    by set="user & this/-1" read
    by * none break

# Read access to personal user accounts and contacts
#------------------------------------------------------------------

# Block read access to homeDirectory with value "{{ aedir_homedirectory_hidden }}"
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(homeDirectory={{ aedir_homedirectory_hidden }})"
  attrs=homeDirectory
    by * none

# Give read access to POSIX accounts to servers
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=posixAccount)"
  attrs=entry,entryDN,entryUUID,objectClass,structuralObjectClass,aeStatus,modifyTimestamp,uid,uidNumber,gidNumber,homeDirectory
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeVisibleGroups & this/memberOf" read
    by self read
    by * none break

# Search access to pwdChangedTime for referenced login user groups
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=account)"
  attrs=pwdChangedTime
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeLoginGroups & this/memberOf" search
    by * none break

# Grant read access to OATH-LDAP token reference
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=oathUser)"
  attrs=oathHOTPToken,oathTOTPToken
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set="{{ aedir_who_srvgroup }}/aeLoginGroups & this/memberOf" search
    by * none break

# Read access to specific memberOf *values* to all services and hosts
# where aeSrvGroup references this particular group DN
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=posixAccount)"
  attrs=memberOf
  val.regex="^(.+)$"
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set.expand="user/-1 & [ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(aeVisibleGroups=${v1}))]/entryDN" read
    by set.expand="user/aeSrvGroup & [ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(aeVisibleGroups=${v1}))]entryDN" read
    by self read
    by * none
access to
  dn.subtree="{{ aedir_suffix }}"
  filter="(objectClass=aeContact)"
  attrs=memberOf
  val.regex="^(.+)$"
    by group/aeGroup/member="cn=ae-login-proxies,cn=ae,{{ aedir_suffix }}" read
    by set.expand="user/-1 & [ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(aeDisplayNameGroups=${v1}))]/entryDN" read
    by set.expand="user/aeSrvGroup & [ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(aeDisplayNameGroups=${v1}))]entryDN" read
    by self read
    by * none

# Last catch ACLs
#------------------------------------------------------------------

access to
  dn.base="{{ aedir_suffix }}"
  attrs=children,objectClass,ou,description
    by users read
    by * auth

access to
  dn.subtree="{{ aedir_suffix }}"
    by users search
    by * auth

#---------------------------------------------------------------------------
# overlays used within {{ aedir_suffix }}
#---------------------------------------------------------------------------

# for counting search results without retrieving them
overlay noopsrch

# for dereferencing attributes
overlay deref

# Where to log LDAP write operations (for auditing)
overlay accesslog
logdb "{{ aedir_accesslog_suffix }}"
logops writes
logold "(objectClass=*)"
logoldattr entryUUID objectClass cn uid
logpurge {{ openldap_log_purge }}

# for back-links to group entries in member entries
overlay memberof
memberof-group-oc groupOfEntries
memberof-member-ad member
memberof-memberof-ad memberOf
memberof-dangling ignore
memberof-refint true

{% if oath_ldap_enabled==True %}
# pass bind requests to external listener process receiving the requests
# on Unix Domain socket path {{ oath_ldap_socket_path }}
# (after password policy check in slapo-ppolicy)
overlay sock
extensions binddn peername ssf connid
socketpath {{ oath_ldap_socket_path }}
sockops bind
{% if oath_ldap_dn_regex %}
sockdnpat "{{ oath_ldap_dn_regex }}"
{% endif %}
{% endif %}

# password policy overlay
# (after bind-DN rewriting with slapo-rwm)
overlay ppolicy
# the default password policy is deliberatly unusable
ppolicy_default cn=ppolicy-default,cn=ae,{{ aedir_suffix }}
ppolicy_hash_cleartext
ppolicy_use_lockout

# Record last bind in user entry
overlay lastbind

{% include 'slapo-rwm.conf.j2' %}

#---------------------------------------------------------------------------
# replication of {{ aedir_suffix }}
#---------------------------------------------------------------------------

# syncrepl-Overlay
overlay syncprov
syncprov-checkpoint 1000 2
syncprov-reloadhint TRUE

{% for provider_replica in openldap_syncrepl_providers %}
syncrepl rid=0{{ loop.index }}
  provider=ldaps://{{ hostvars[provider_replica].get('openldap_service_fqdn',provider_replica) }}
  type=refreshAndPersist
  network-timeout={{ openldap_syncrepl_network_timeout }}
  timeout={{ openldap_syncrepl_timeout }}
  sizelimit=unlimited
  timelimit=unlimited
  interval=00:00:01:00
  retry="30 +"
  keepalive=240:10:30
  searchbase="{{ aedir_suffix }}"
  filter="(objectClass=*)"
  scope=sub
  schemachecking=on
  bindmethod=sasl
  saslmech=EXTERNAL
  tls_cacert={{ openldap_cacert_pathname }}
  tls_cert={{ openldap_cert_pathname }}
  tls_key={{ openldap_key_pathname }}
  tls_protocol_min={{ openldap_syncrepl_tls_protocol_min }}
  tls_cipher_suite={{ openldap_syncrepl_tls_cipher_suite }}

{% endfor %}

{% include 'monitor.conf.j2' %}

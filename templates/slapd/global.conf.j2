#######################################################################
# Global slapd configuration section
#######################################################################

#---------------------------------------------------------------------------
# Load dynamic backend modules:
#---------------------------------------------------------------------------

moduleload back_mdb
moduleload back_monitor
moduleload back_sock

#---------------------------------------------------------------------------
# Load dynamic overlay modules:
#---------------------------------------------------------------------------

moduleload accesslog
moduleload ppolicy
moduleload memberof
moduleload rwm
# on provider *and* consumer as a work-around for ITS#8396
moduleload syncprov

# contrib modules
moduleload lastbind
moduleload deref
moduleload noopsrch
moduleload pw-argon2

{% if slapd_openldap_role=="provider" %}
# only on provider replicas
moduleload sssvlv
moduleload constraint
moduleload refint
moduleload unique
{% endif %}

#---------------------------------------------------------------------------
# Include schema files
#---------------------------------------------------------------------------

# Schema files shipped with OpenLDAP distribution
include {{ openldap_path.conf_prefix }}/schema/core.schema
include {{ openldap_path.conf_prefix }}/schema/cosine.schema
include {{ openldap_path.conf_prefix }}/schema/inetorgperson.schema
include {{ openldap_path.conf_prefix }}/schema/dyngroup.schema
include {{ openldap_path.conf_prefix }}/schema/openldap.schema
include {{ openldap_path.conf_prefix }}/schema/ppolicy.schema
include {{ openldap_path.conf_prefix }}/schema/nis.schema
include {{ openldap_path.conf_prefix }}/schema/duaconf.schema

# mail stuff
include {{ slapd_aedir_schema_prefix }}/mail.schema

# For SSH keys
include {{ slapd_aedir_schema_prefix }}/openssh-lpk_openldap.schema

# sudoers schema, see sudoers.ldap(8)
include {{ slapd_aedir_schema_prefix }}/sudoers.schema

# automount schema
include {{ slapd_aedir_schema_prefix }}/autofs.schema

include {{ slapd_aedir_schema_prefix }}/draft-stroeder-mailboxrelatedobject.schema
include {{ slapd_aedir_schema_prefix }}/draft-stroeder-namedobject.schema
include {{ slapd_aedir_schema_prefix }}/draft-findlay-ldap-groupofentries.schema
# OATH-LDAP
include {{ slapd_aedir_schema_prefix }}/oath-ldap.schema

# OID macros used in subsequent schema files
include {{ slapd_aedir_schema_prefix }}/stroeder.com-oid-macros.schema
include {{ slapd_aedir_schema_prefix }}/stroeder.com.schema

# for password self-service
include {{ slapd_aedir_schema_prefix }}/mspwdreset.schema

# AE-DIR
include {{ slapd_aedir_schema_prefix }}/ae-dir.schema
include {{ slapd_aedir_schema_prefix }}/ae-dir-dcr.schema
{% if slapd_openldap_role=="provider" %}
include {{ slapd_aedir_schema_prefix }}/ae-dir-session.schema
{% endif %}

#---------------------------------------------------------------------------
# Process parameters
#---------------------------------------------------------------------------

# Where PID and arg files are stored
pidfile {{ slapd_openldap_rundir }}/slapd.pid
argsfile {{ slapd_openldap_rundir }}/slapd.args

{% if slapd_openldap_role=="provider" %}
# serverID must be unique across all provider replicas
serverID {{ openldap_server_id }}
{% endif %}

# Maximum number of pending requests for anonymous sessions
conn_max_pending {{ slapd_openldap_conn_max_pending }}

# Maximum number of pending requests for authenticated sessions
conn_max_pending_auth {{ slapd_slapd_openldap_conn_max_pending_auth }}

# which messages to send to syslog
loglevel {{ slapd_openldap_log_level }}

# number of listener threads used (should be power of 2)
listener-threads {{ slapd_openldap_listener_threads }}

# number of worker threads used
threads {{ slapd_openldap_threads }}

# additional rootDSE attributes in external LDIF file
rootDSE {{ slapd_slapd_aedir_etc_openldap }}/rootDSE.ldif

#---------------------------------------------------------------------------
# SASL parameters
#---------------------------------------------------------------------------

sasl-host {{ slapd_openldap_service_fqdn }}

#---------------------------------------------------------------------------
# TLS parameters
#---------------------------------------------------------------------------

# optional usage of TLS client certs
TLSVerifyClient allow

TLSProtocolMin {{ slapd_openldap_tls_protocol_min }}
TLSCipherSuite {{ slapd_openldap_tls_cipher_suite }}

TLSCACertificateFile {{ slapd_openldap_cacert_pathname }}
{% if slapd_openldap_cert_pathname %}
TLSCertificateFile {{ slapd_openldap_cert_pathname }}
{% endif %}
{% if slapd_openldap_key_pathname %}
TLSCertificateKeyFile {{ slapd_openldap_key_pathname }}
{% endif %}
TLSDHParamFile {{ slapd_openldap_dhparam_pathname }}

#---------------------------------------------------------------------------
# Rewrite SASL identity to DIT identity
#---------------------------------------------------------------------------

# Map root user to rootdn when SASL/EXTERNAL is used with LDAPI
authz-regexp
  "gidnumber={{ slapd_aedir_rootdn_gid_number }}\\+uidnumber={{ slapd_aedir_rootdn_uid_number }},cn=peercred,cn=external,cn=auth"
  "cn=root,{{ slapd_aedir_suffix }}"

{% if getent_passwd.aehostd is defined %}
# Map aehostd user to aeHost entry when SASL/EXTERNAL is used with LDAPI
authz-regexp
  "gidnumber={{ getent_passwd.aehostd[2] }}\\+uidnumber={{ getent_passwd.aehostd[1] }},cn=peercred,cn=external,cn=auth"
  "host={{ inventory_hostname }},cn={{ slapd_aedir_srvgroup }},cn=ae,{{ slapd_aedir_suffix }}"
{% endif %}

# Map user/group to existing posixAccount entry when SASL/EXTERNAL is used with LDAPI
authz-regexp
  "gidnumber=([0-9]+)\\+uidnumber=([0-9]+),cn=peercred,cn=external,cn=auth"
  "ldap:///{{ slapd_aedir_suffix }}??sub?(&(objectClass=posixAccount)(uidNumber=$2)(aeStatus=0))"
# Map user/group to existing account entry when SASL/EXTERNAL is used with LDAPI
# and SASL proxy authz is used with "u:foo"
authz-regexp
  "uid=({{ slapd_aedir_aeuser_uid_regex }}|{{ slapd_aedir_aeservice_uid_regex }}),cn=external,cn=auth"
  "ldap:///{{ slapd_aedir_suffix }}??sub?(&(objectClass=account)(uid=$1)(aeStatus=0))"

{% for cert_suffix in slapd_openldap_tls_cert_suffixes %}
# Rewrite any cert with subject-DN suffix "{{ cert_suffix }}" by searching it in attribute seeAlso
authz-regexp
  "(cn=[^,]+,{{ cert_suffix }})"
  "ldap:///{{ slapd_aedir_suffix }}??sub?(&(objectClass=pkiUser)(seeAlso=$1)(seeAlso:dnSubordinateMatch:={{ cert_suffix }})(aeStatus=0))"

# Rewrite server cert with subject-DN suffix "{{ cert_suffix }}" by searching CN attribute value in server entry name attributes
authz-regexp
  "cn=([a-zA-Z0-9.-]+),{{ cert_suffix }}"
  "ldap:///{{ slapd_aedir_suffix }}??sub?(&(objectClass=aeHost)(|(cn=$1)(host=$1))(aeStatus=0))"

{% endfor %}
# subject name is equal to AE-DIR entry DN
authz-regexp
  "(.+,{{ slapd_aedir_suffix }})"
  "ldap:///$1??base?(&(|(objectClass=aeUser)(objectClass=aeService)(objectClass=aeHost))(aeStatus=0))"

#---------------------------------------------------------------------------
# Global access control, security restrictions and limits
#---------------------------------------------------------------------------

require LDAPv3

# SSF value for ldapi://
localSSF 256
# minimum required SSF value (security strength factor)
security ssf=128

# Maximum incoming LDAP PDU size for anonymous sessions
sockbuf_max_incoming {{ slapd_openldap_sockbuf_max_incoming }}

# Maximum incoming LDAP PDU size for authenticated sessions
sockbuf_max_incoming_auth {{ slapd_slapd_openldap_sockbuf_max_incoming_auth }}

# Number of seconds to wait before forcibly closing an idle client connection
idletimeout {{ slapd_openldap_idletimeout }}

# enable proxy authorization with authzTo attribute
authz-policy to

# allow anonymous access to supportedSASLMechanisms: EXTERNAL
access to
  dn.base=""
  attrs=supportedSASLMechanisms
  val.regex="^EXTERNAL$"
    by * read
access to
  dn.base=""
  attrs=supportedSASLMechanisms
    by * none
# allow anonymous access to read standard search base
access to
  dn.base=""
  attrs=objectClass
    by users break
    by * search
access to
  dn.base=""
  attrs=entry,defaultNamingContext,aeRoot
    by * read

# grant read access to normal suffix value to everybody (including anonymous)
access to
  dn.base=""
  attrs=namingContexts
  val.regex="^{{ slapd_aedir_suffix }}$"
    by * read

{% if slapd_aedir_accesslog_suffix %}
# grant read access to accesslog suffix value to all zone admins
access to
  dn.base=""
  attrs=namingContexts
  val.regex="^{{ slapd_aedir_accesslog_suffix }}$"
    by group/aeGroup/member="cn=ae-all-zone-admins,cn=ae,{{ slapd_aedir_suffix }}" read
    by * none break
{% endif %}

# allow admin/auditor access to read all search bases
access to
  dn.base=""
  attrs=namingContexts,configContext,monitorContext
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ slapd_aedir_suffix }}" read
    by group/aeGroup/member="cn=ae-auditors,cn=ae,{{ slapd_aedir_suffix }}" read
    by dn.exact="cn=root,{{ slapd_aedir_suffix }}" read
    by * none

{% if slapd_openldap_role=="provider" %}
# allow admins to add new children entries (database root entries)
access to
  dn.base=""
  attrs=children
    by group/aeGroup/member="cn=ae-admins,cn=ae,{{ slapd_aedir_suffix }}" write
    by dn.exact="cn=root,{{ slapd_aedir_suffix }}" write
{% endif %}

# allow all bound users to read rest of rootDSE
access to
  dn.base=""
    by users read

# allow all bound users to read subschema subentry
access to
  dn.base="cn=Subschema"
    by users read


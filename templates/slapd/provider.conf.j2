############################################################################
# OpenLDAP configuration for AE-DIR {{ openldap_role }}
# This file MUST NOT be world-readable!
# {{ ansible_managed }}
############################################################################

{% include 'global.conf.j2' %}

#---------------------------------------------------------------------------
# password hash parameters
#---------------------------------------------------------------------------

password-hash {{ openldap_password_hash }}
{% if openldap_password_hash.upper()=='{CRYPT}' %}
password-crypt-salt-format "{{ openldap_password_crypt_salt_format }}"
{% endif %}

{% include 'config.conf.j2' %}

{% if aedir_accesslog_suffix %}
{% include 'accesslog.conf.j2' %}
{% endif %}

{% include 'um/general.conf.j2' %}

add_content_acl yes

{% include 'um/indices.conf.j2' %}

# {{ openldap_role }} special indices

# general eq-only indexes
index departmentNumber eq
index mailLocalAddress sub,eq
index mailRoutingAddress sub,eq
index memberURL pres
index rfc822MailMember sub,eq

# for host and network management
index aeNwDevice eq

# sub and eq indexes
index displayName sub,eq
index givenName sub,eq
index o sub,eq
index ou sub,eq
index sn sub,eq

# zones
index aeABAccessGroups pres,eq
index aePasswordAdmins pres,eq
index aeZoneAdmins pres,eq
index aeZoneAuditors pres,eq

# for person/employee references
index aeDept eq
index aeLocation eq
index employeeNumber eq
index uniqueIdentifier eq

# Meta data
index aeNotBefore,aeNotAfter pres,eq

# hardware devices
index aeOwner eq

# for OATH-LDAP (indexes only needed on provider)
index oathHOTPParams eq
index oathHOTPToken eq
index oathTokenIdentifier eq
index oathTOTPParams eq
index oathTOTPToken eq

{% include 'um/limits.conf.j2' %}

{% include 'um/acl-provider.conf.j2' %}

#---------------------------------------------------------------------------
# overlays used within {{ aedir_suffix }}
#---------------------------------------------------------------------------

# for counting search results without retrieving them
overlay noopsrch

# for dereferencing attributes
overlay deref

# for server-side sorting
overlay sssvlv

# Check sub-tree wide uniqueness of certain attributes
overlay unique
unique_uri "ldap:///{{ aedir_suffix }}?uid,uidNumber?sub?(objectClass=*)"
unique_uri "ldap:///{{ aedir_suffix }}?nickName?sub?(objectClass=*)"
unique_uri "ldap:///{{ aedir_suffix }}?mailLocalAddress?sub?(objectClass=*)"
unique_uri "ldap:///{{ aedir_suffix }}?seeAlso?sub?(objectClass=*)"
unique_uri "ldap:///{{ aedir_suffix }}?ipHostNumber,host,aeFqdn,macAddress?sub?(objectClass=*)"
unique_uri "ldap:///{{ aedir_suffix }}?employeeNumber,uniqueIdentifier,displayName?sub"
{% if aedir_unique_person_zones %}
# only one aeUser entry per aePerson in these zones
{% for zone in aedir_unique_person_zones %}
unique_uri "ldap:///cn={{ zone }},{{ aedir_suffix }}?aePerson?sub"
{% endfor %}
{% endif %}
# these two constraints are only possible with a negation filter
unique_uri "ldap:///{{ aedir_suffix }}?cn?sub?(!(|(objectClass=aePerson)(objectClass=aeUser)(objectClass=aeNwDevice)))"
unique_uri "ldap:///{{ aedir_suffix }}?gidNumber?sub"
unique_uri "ldap:///{{ aedir_suffix }}?serialNumber?sub?(objectClass=*)"

# Enforce constraints on attribute values
overlay constraint

constraint_attribute aeStatus
  regex "^(-1|0|1|2)$"

constraint_attribute aeExpiryStatus
  regex "^(1|2)$"

# Limit some attributes to be SINGLE-VALUE by constraint
constraint_attribute uid
  count 1
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeObject)"
constraint_attribute cn
  count 1
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeObject)"
constraint_attribute mail
  count 1
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=inetLocalMailRecipient)"
constraint_attribute authzTo
  count 1

constraint_attribute loginShell
  set "this/loginShell & ( [{{ aedir_login_shells|join("] | [") }}] )"

constraint_attribute host
  regex "^[a-zA-Z0-9.-]+$"

constraint_attribute uniqueIdentifier
  regex "^{{ aedir_aeperson_uniqueid_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aePerson)"

constraint_attribute cn
  regex "^{{ aedir_aelocation_cn_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeLocation)"

constraint_attribute departmentNumber
  regex "^{{ aedir_aedept_deptnumber_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeDept)"

constraint_attribute uid
  regex "^{{ aedir_aeuser_uid_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"
constraint_attribute uid
  regex "^{{ aedir_aeservice_uid_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeService)"

# Regex constraint on 'cn' in zone entries
constraint_attribute cn
  regex "^{{ aedir_aezone_cn_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeZone)"

# check whether uidNumber is within valid range (see aeRoot)
constraint_attribute uidNumber
  set "([{{ aedir_suffix }}] & ([ldap:///{{ aedir_suffix }}?entryDN?base?(&(objectClass=aeRoot)(aeUidNumberMin<=]+this/uidNumber+[)(aeUidNumberMax>=]+this/uidNumber+[))])/entryDN)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(!(&(objectClass=aeService)(entryDN:dnOneLevelMatch:=cn=ae,{{ aedir_suffix }})))"

# check whether gidNumber is within valid range (see aeRoot)
constraint_attribute gidNumber
  set "([{{ aedir_suffix }}] & ([ldap:///{{ aedir_suffix }}?entryDN?base?(&(objectClass=aeRoot)(aeGidNumberMin<=]+this/gidNumber+[)(aeGidNumberMax>=]+this/gidNumber+[))])/entryDN)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(!(&(objectClass=aeService)(entryDN:dnOneLevelMatch:=cn=ae,{{ aedir_suffix }})))"

# uidNumber and gidNumber in posixAccount entries must be the same value
constraint_attribute uidNumber,gidNumber
  set "this/uidNumber & this/gidNumber"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=posixAccount)"

# naming convention for 'cn' in 'aeSrvGroup' entries
constraint_attribute cn
  regex "^{{ aedir_aesrvgroup_cn_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSrvGroup)"

# naming convention for 'cn' in 'aeGroup' entries
constraint_attribute cn
  regex "^{{ aedir_aegroup_cn_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeGroup)"

# naming convention for 'cn' in 'aeSudoRule' entries
constraint_attribute cn
  regex "^{{ aedir_aesudorule_cn_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSudoRule)"

# visibility of aeSudoRule entries is maintained for 'aeSrvGroup'
# => limit sudoHost to 'ALL'
constraint_attribute sudoHost
  regex "^ALL$"

# attribute 'mobile'
constraint_attribute mobile
  regex "^\\+[1-9]?[0-9 -]+$"

# naming convention for 'aeTicketId'
constraint_attribute aeTicketId
  regex "^{{ aeticketid_regex }}$"

constraint_attribute sshPublicKey
  regex "^{{ aedir_aeservice_sshpubkey_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeService)"
constraint_attribute sshPublicKey
  regex "^{{ aedir_aeuser_sshpubkey_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# zone (password) admin/auditor groups to DNs of active aeGroup entries
# must solely reference special zone role groups
constraint_attribute aeZoneAdmins
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeGroup)(aeStatus=0)(cn=*-zone-admins)(!(|(cn:dn:=ae)(cn:dn:=pub))))"
constraint_attribute aePasswordAdmins
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeGroup)(aeStatus=0)(cn=*-zone-admins)(!(|(cn:dn:=ae)(cn:dn:=pub))))"
# aePasswordAdmins must be subset of aeZoneAdmins
constraint_attribute aePasswordAdmins
  set "this/aePasswordAdmins & this/aeZoneAdmins"
  restrict="ldap:///{{ aedir_suffix }}??sub"
constraint_attribute aeZoneAuditors
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeGroup)(aeStatus=0)(|(cn=*-zone-admins)(cn=*-zone-auditors))(!(|(cn:dn:=ae)(cn:dn:=pub))))"

# rights groups to DNs of active aeGroup entries
# must not reference special role groups
constraint_attribute aeLoginGroups,aeSetupGroups,aeLogStoreGroups,aeABAccessGroups
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeGroup)(aeStatus=0)(!(|(cn:dn:=ae)(cn:dn:=pub)(cn=*-zone-admins)(cn=*-zone-auditors))))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(!(cn:dn:=ae))"

# visibility groups to DNs of active aeGroup entries
# must not reference special role groups
constraint_attribute aeVisibleGroups,aeDisplayNameGroups
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(|(objectClass=aeGroup)(objectClass=aeMailGroup))(aeStatus=0)(!(|(cn:dn:=ae)(cn:dn:=pub)(cn=*-zone-admins)(cn=*-zone-auditors))))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(!(cn:dn:=ae))"

# special rights groups constraints for zone ae
constraint_attribute aeLoginGroups,aeSetupGroups,aeLogStoreGroups,aeVisibleGroups,aeDisplayNameGroups
  uri "ldap:///cn=ae,{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeGroup)(aeStatus=0)(!(|(cn=ae-admins)(cn=ae-auditors)(cn=ae-providers)(cn=ae-replicas)(cn=ae-login-proxies)(cn=*-zone-admins)(cn=*-zone-auditors))))"
  restrict="ldap:///cn=ae,{{ aedir_suffix }}??sub"

# rights groups must be referenced in aeVisibleGroups
constraint_attribute aeDisplayNameGroups
  set "this/aeDisplayNameGroups & this/aeVisibleGroups"
  restrict="ldap:///{{ aedir_suffix }}??sub"
constraint_attribute aeLoginGroups
  set "this/aeLoginGroups & this/aeVisibleGroups"
  restrict="ldap:///{{ aedir_suffix }}??sub"

# restrict values of aeVisibleSudoers to DNs of active aeSudoRule entries
constraint_attribute aeVisibleSudoers
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSudoRule)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub"

# restrict references from personal user accounts to their person entries
constraint_attribute aePerson
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(objectClass=aePerson)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"
# if parent aeZone entry has aeLocation set then it must match aeLocation in aePerson
constraint_attribute aePerson,entryDN
  set "this/-1/entryDN & ([ldap:///] + this/-1/entryDN + [?entryDN?base?(&(objectClass=aeZone)(|(!(aeLocation=*))(aeLocation=] + this/aePerson/aeLocation + [)))])/entryDN"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"
# if parent aeZone entry has aeDept set then it must match aeDept in aePerson
constraint_attribute aePerson,entryDN
  set "this/-1/entryDN & ([ldap:///] + this/-1/entryDN + [?entryDN?base?(&(objectClass=aeZone)(|(!(aeDept=*))(aeDept=] + this/aePerson/aeDept + [)))])/entryDN"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# restrict tag references
constraint_attribute aeTag
  uri "ldap:///{{ aedir_suffix }}?cn?sub?(&(objectClass=aeTag)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?"

# restrict aeProxyFor in aeSrvGroup entry to reference solely active non-proxy aeSrvGroup in same zone
constraint_attribute aeProxyFor
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(!(aeProxyFor=*)))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSrvGroup)"
constraint_attribute aeProxyFor,entryDN
  set "this/aeProxyFor/-1 & this/-1"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSrvGroup)"

# restrict aeRequires in aeSrvGroup entry to reference solely active aeSrvGroup
constraint_attribute aeRequires
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSrvGroup)"

# restrict aeSrvGroup in aeHost and aeService entries to reference solely active aeSrvGroup in same zone
constraint_attribute aeSrvGroup
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeSrvGroup)(aeStatus=0)(!(aeProxyFor=*)))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(|(objectClass=aeHost)(objectClass=aeService))"
constraint_attribute aeSrvGroup
  set "this/aeSrvGroup/-1 & this/-2"
  restrict="ldap:///{{ aedir_suffix }}??sub?(|(objectClass=aeHost)(objectClass=aeService))"

# restrict aeNwDevice in aeNwDevice entry to reference
# an active aeNwDevice in same aeHost but not itself
constraint_attribute aeNwDevice
  set "this/aeNwDevice & ([ldap:///]+this/aeNwDevice+[?entryDN?base?(&(objectClass=aeNwDevice)(aeStatus=0)(!(cn=]+this/cn+[)))])/entryDN"
constraint_attribute aeNwDevice
  set "this/aeNwDevice/-1 & this/-1"

# restrict aeHost in aeService entry to reference solely active aeHost entry
constraint_attribute aeHost
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeHost)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeService)"

# Force 'mail' in non-mailbox personal user accounts to match
# 'mail' in referenced person entry
constraint_attribute aePerson,mail
  set "this/aePerson/mail & this/mail"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeUser)(!(objectClass=inetLocalMailRecipient)))"

# Force 'mail' in mailbox-related personal user accounts to match
# one of the 'mailLocalAddress' attribute values
constraint_attribute aePerson,mail
  set "this/mail & this/mailLocalAddress"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeUser)(objectClass=inetLocalMailRecipient))"

# 'givenName' the same in personal user accounts and referenced person entries
constraint_attribute aePerson,givenName
  set "this/aePerson/givenName & this/givenName"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# 'sn' the same in personal user accounts and referenced person entries
constraint_attribute aePerson,sn
  set "this/aePerson/sn & this/sn"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# 'sudoUser' only may contain a reference to 'cn' of an active group
constraint_attribute sudoUser
  set "([%] + [ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeGroup)(aeStatus=0)(!(|(cn=ae-admins)(cn=ae-auditors)(cn=ae-provider)(cn=ae-replicas)(cn=ae-login-proxies)(cn=*-zone-admins)(cn=*-zone-auditors))))]/cn) & this/sudoUser"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeSudoRule)"

# 'homeDirectory' must be either
# 1. composed as /<path-prefix>/<uid> for 'aeUser' entries
#    with valid path-prefix {{ aedir_homedirectory_prefixes|join(' or ') }}
# 2. just set to value "{{ aedir_homedirectory_hidden }}"
constraint_attribute uid,homeDirectory
  set "( [{{ aedir_homedirectory_prefixes|join('] | [') }}] + [/] + this/uid | [{{ aedir_homedirectory_hidden }}] ) & this/homeDirectory"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# displayName in personal user account must be composed based on "<cn> (<uid>/<uidNumber>)"
constraint_attribute displayName,cn,uid,uidNumber
  set "(this/cn + [ (] + this/uid + [/] + this/uidNumber + [)]) & this/displayName"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeUser)"

# cn in aeUser or aePerson entry must be composed based on "<givenName> <sn>"
constraint_attribute cn,sn,givenName
  set "(this/givenName + [ ] + this/sn) & this/cn"
  restrict="ldap:///{{ aedir_suffix }}??sub?(|(objectClass=aePerson)(objectClass=aeUser))"

# restrict member zone(s) to active zones
constraint_attribute aeMemberZone
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aeZone)(aeStatus=0))"

# restrict references from user groups to have only active accounts as members
constraint_attribute member
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(|(objectClass=aeUser)(objectClass=aeService))(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeGroup)"

# restrict references from mail groups to have only active accounts/contacts with e-mail address as members
constraint_attribute member
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(|(objectClass=inetLocalMailRecipient)(objectClass=aeContact))(mail=*)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeMailGroup)"

# zone-constrainted groups must contain only members from specific zone
constraint_attribute member
  set "this/member/-1 & this/aeMemberZone"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=groupOfEntries)(aeMemberZone=*))"

# location-constrainted groups must contain only aeUser members assigned to a specific location
constraint_attribute member
  set "this/member/aePerson/aeLocation & this/aeLocation"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=groupOfEntries)(aeLocation=*))"

# department-constrainted groups must contain only aeUser members assigned to a specific department
constraint_attribute member
  set "this/member/aePerson/aeDept & this/aeDept"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=groupOfEntries)(aeDept=*))"

# restrict memberUid to be uid of an active posixAccount
constraint_attribute memberUid
  uri "ldap:///{{ aedir_suffix }}?uid?sub?(&(|(objectClass=aeUser)(objectClass=aeService))(objectClass=posixAccount)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub"

# restrict memberUid to be consistent with group membership defined in member
constraint_attribute memberUid,member
  set "this/memberUid & this/member/uid"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=posixGroup)"

# restrict rfc822MailMember to be mail of an active local e-mail account
constraint_attribute rfc822MailMember
  uri "ldap:///{{ aedir_suffix }}?mail?sub?(&(|(objectClass=inetLocalMailRecipient)(objectClass=aeContact))(mail=*)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub"

# restrict rfc822MailMember to be consistent with group membership defined in member
constraint_attribute rfc822MailMember,member
  set "this/rfc822MailMember & this/member/mail"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeMailGroup)"

# regex constraint for 'serialNumber in aeAuthcToken entries
constraint_attribute serialNumber
  regex "^{{ aedir_aeauthctoken_serial_regex }}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeAuthcToken)"

# constraints for aeAuthcToken/oathHOTPToken entries for Yubikey
# aeHwSerialNumber limited to max. eight digits
constraint_attribute aeHwSerialNumber
  regex "^[0-9]{0,8}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeAuthcToken)(objectClass=oathHOTPToken)(cn=yubikey-*))"
constraint_attribute serialNumber,cn,aeHwSerialNumber
  set "this/serialNumber & ([yubikey-] + this/aeHwSerialNumber)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeAuthcToken)(objectClass=oathHOTPToken)(cn=yubikey-*))"
constraint_attribute displayName,aeHwSerialNumber
  set "this/displayName & ([yubikey #] + this/aeHwSerialNumber)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeAuthcToken)(objectClass=oathHOTPToken)(cn=yubikey-*))"
constraint_attribute oathTokenSerialNumber,aeHwSerialNumber
  set "this/oathTokenSerialNumber & this/aeHwSerialNumber"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathHOTPToken)"
constraint_attribute oathTokenIdentifier
  regex "^ubhe[0-9]{8}$"
  restrict="ldap:///{{ aedir_suffix }}??sub?(&(objectClass=aeAuthcToken)(objectClass=oathHOTPToken)(cn=yubikey-*))"

# standard constraints for OATH-LDAP
constraint_attribute oathHOTPToken
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(objectClass=oathHOTPToken)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathHOTPUser)"
constraint_attribute oathHOTPParams
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(objectClass=oathHOTPParams)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathHOTPToken)"
constraint_attribute oathTOTPToken
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(objectClass=oathTOTPToken)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathTOTPUser)"
constraint_attribute oathTOTPParams
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(objectClass=oathTOTPParams)"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathTOTPToken)"

# aeUser>aePerson and aeAuthcToken>aeOwner entries must reference same aePerson entry
constraint_attribute oathHOTPToken
  set "this/oathHOTPToken/aeOwner & this/aePerson"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathHOTPUser)"
constraint_attribute oathTOTPToken
  set "this/oathTOTPToken/aeOwner & this/aePerson"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=oathTOTPUser)"

# authentication tokens shall only be assigned to active owners (persons)
constraint_attribute aeOwner
  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=aePerson)(aeStatus=0))"
  restrict="ldap:///{{ aedir_suffix }}??sub?(objectClass=aeAuthcToken)"

# check whether appropriate password policy is assigned
# FIX ME! This does not work as expected yet!
#constraint_attribute pwdPolicySubentry
#  uri "ldap:///{{ aedir_suffix }}?entryDN?sub?(&(objectClass=pwdPolicy)(aeStatus=0))"

# SSH certificate options, see CLI arg -O in man-page ssh-keygen(1)
# only permit values are allowed assuming that
# 1. SSH certs are issued with '-O clear' and
# 2. authorized keys files are generated with 'restrict'
constraint_attribute aeSSHPermissions
  regex "^({{ aedir_sshkey_perms|join('|') }})$"

# Referential integrity checking
overlay refint
refint_attributes
  aeHost
  aeLocation
  aeLoginGroups
  aeLogStoreGroups
  aeNwDevice
  aeOwner
  aePerson
  aeProxyFor
  aeSetupGroups
  aeSrvGroup
  aeVisibleGroups
  aeDisplayNameGroups
  aeVisibleSudoers
  manager
  member
  oathHOTPParams
  oathHOTPToken
  oathTOTPParams
  oathTOTPToken
  seeAlso

{% if aedir_pwsync_targeturl is defined %}
# send extended requests to external listener process receiving the requests
# on Unix Domain socket path {{ aedir_pwsync_socket_path }}
# (after password policy check in slapo-ppolicy)
overlay sock
extensions binddn peername ssf connid
socketpath {{ aedir_pwsync_socket_path }}
sockops extended
{% if aedir_pwsync_dn_regex %}
sockdnpat "{{ aedir_pwsync_dn_regex }}"
{% endif %}
{% endif %}

{% if aedir_accesslog_suffix %}
# Where to log LDAP write operations (for auditing)
overlay accesslog
logdb "{{ aedir_accesslog_suffix }}"
logops writes
logold "(objectClass=*)"
logoldattr entryUUID objectClass cn uid
logpurge {{ openldap_log_purge }}
{% endif %}

# for back-links to group entries in member entries
overlay memberof
memberof-group-oc groupOfEntries
memberof-member-ad member
memberof-memberof-ad memberOf
memberof-dangling ignore
memberof-refint true

{% if oath_ldap_enabled==True %}
# pass bind requests to external listener process receiving the requests
# on Unix Domain socket path {{ oath_ldap_socket_path }}
# (after password policy check in slapo-ppolicy)
overlay sock
extensions binddn peername ssf connid
socketpath {{ oath_ldap_socket_path }}
{% if openldap_role=='provider' %}
sockops bind compare
{% else %}
sockops bind
{% endif %}
{% if oath_ldap_dn_regex %}
sockdnpat "{{ oath_ldap_dn_regex }}"
{% endif %}
{% endif %}

# password policy overlay
# (after bind-DN rewriting with slapo-rwm)
overlay ppolicy
# the default password policy is deliberatly unusable
ppolicy_default cn=ppolicy-default,cn=ae,{{ aedir_suffix }}
ppolicy_hash_cleartext
ppolicy_use_lockout

# Record last bind in user entry
overlay lastbind

{% include 'slapo-rwm.conf.j2' %}

{% include 'um/replication.conf.j2' %}

{% if openldap_syncrepl_providers %}
mirrormode true
{% endif %}

{% if aedir_session_suffix %}
{% include 'session.conf.j2' %}
{% endif %}

{% include 'monitor.conf.j2' %}

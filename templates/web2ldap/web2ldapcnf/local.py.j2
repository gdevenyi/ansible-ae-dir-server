# -*- coding: utf-8 -*-
"""
{{ ansible_managed }}

Some local configuration tweaks for Ã†-DIR
"""

# imports from Python's standard lib
import sys, os, re

# internal configuration import
import web2ldapcnf

#-----------------------------------------------------------------------
# session limit/expiration parameters

# explicitly set Cookie domain to prevent DNS rebinding attacks
#web2ldapcnf.cookie_domain = '{{ web_service_fqdn }}'

# Maximum number of concurrent web sessions stored
web2ldapcnf.session_limit = 80

# Maximum number of concurrent web sessions per remote IP
web2ldapcnf.session_per_ip_limit = 20

# Amount of time in seconds after which inactive sessions will be expired
# and the session data is removed silently without the possibility to relogin.
web2ldapcnf.session_remove = 900

# unsuspicious target URLs accept by redirector even without a session
web2ldapcnf.good_redirect_targets=set((
  '/web2ldap.html',
))

#-----------------------------------------------------------------------

import web2ldapcnf.hosts

# this import is needed for the following code lines being executed after this import
import web2ldapcnf.plugins

#-----------------------------------------------------------------------

# Dictionary specifying accepted address/net mask strings of
# accepted client addresses for certain URL commands.
# Use [u'0.0.0.0/0.0.0.0','::0'] to allow access to every client but think twice!
# IPv6 network addresses without brackets!
web2ldapcnf.access_allowed = {
  u'_':[
    u'0.0.0.0/0.0.0.0',
    u'::0',
  ],
  u'monitor':[
{% for allowed in web2ldap_monitor_access_allowed %}
    u'{{ allowed }}',
{% endfor %}
  ],
  # disable web2ldap's DNS SRV lookups completely
  u'locate':[],
}

#-----------------------------------------------------------------------
# Tweak some class attributes of AE-DIR plugin classes
#-----------------------------------------------------------------------

import web2ldap.app.plugins.aedir

web2ldap.app.plugins.aedir.AETicketId.reObj = re.compile('^{{ aeticketid_regex }}$')
web2ldap.app.plugins.aedir.AETicketId.html_tmpl = '<a href="https://issues.example.com/browse/{av}">{av}</a>'

# Check hostname in DNS and reverse DNS
web2ldap.app.plugins.aedir.AEHostname.host_lookup=2

import web2ldap.app.plugins.posixautogen
web2ldap.app.plugins.posixautogen.AutogenUIDNumber.minNewValue = {{ aedir_min_uid }}L
web2ldap.app.plugins.posixautogen.AutogenUIDNumber.maxNewValue = {{ aedir_max_uid }}L
web2ldap.app.plugins.posixautogen.AutogenGIDNumber.minNewValue = {{ aedir_min_gid }}L
web2ldap.app.plugins.posixautogen.AutogenGIDNumber.maxNewValue = {{ aedir_max_gid }}L

# regex patterns for enforcing naming conventions (substring match necessary!)
web2ldap.app.plugins.aedir.AECommonNameAEZone.reObj = re.compile('^{{ aedir_aezone_cn_regex }}$')
web2ldap.app.plugins.aedir.AECommonNameAELocation.reObj = re.compile('^{{ aedir_aelocation_cn_regex }}$')
web2ldap.app.plugins.aedir.AECommonNameAEGroup.reObj = re.compile('^{{ aedir_aesrvgroup_cn_regex }}$')
web2ldap.app.plugins.aedir.AECommonNameAESrvGroup.reObj = re.compile('^{{ aedir_aegroup_cn_regex }}$')
web2ldap.app.plugins.aedir.AECommonNameAESudoRule.reObj = re.compile('^{{ aedir_aesudorule_cn_regex }}$')
web2ldap.app.plugins.aedir.AEDepartmentNumber.reObj = re.compile('^{{ aedir_aedept_deptnumber_regex }}$')
web2ldap.app.plugins.aedir.AEServiceSshPublicKey.reObj = re.compile('^{{ aedir_aeservice_sshpubkey_regex }}$')
web2ldap.app.plugins.aedir.AEUserSshPublicKey.reObj = re.compile('^{{ aedir_aeuser_sshpubkey_regex }}$')
web2ldap.app.plugins.aedir.AEHomeDirectory.homeDirectoryPrefixes = ('{{ aedir_homedirectory_prefixes|join("','") }}',)
web2ldap.app.plugins.aedir.AEHomeDirectory.homeDirectoryHidden = '{{ aedir_homedirectory_hidden }}'
web2ldap.app.plugins.aedir.AELoginShell.attr_value_dict = {
{% for login_shell in aedir_login_shells %}
  u'{{ login_shell }}':u'{{ login_shell }}',
{% endfor %}
}
web2ldap.app.plugins.aedir.AESSHPermissions.attr_value_dict = {
{% for ssh_perm in aedir_sshkey_perms %}
  u'{{ ssh_perm }}':u'{{ ssh_perm }}',
{% endfor %}
}

# Parameters for generating/checking user names
# aeUser entries
web2ldap.app.plugins.aedir.AEUserUid.genLen = {{ aedir_username_length }}L
web2ldap.app.plugins.aedir.AEUserUid.minLen = {{ aedir_username_minlen }}L
web2ldap.app.plugins.aedir.AEUserUid.maxLen = {{ aedir_username_maxlen }}L
web2ldap.app.plugins.aedir.AEUserUid.reObj = re.compile('^{{ aedir_aeuser_uid_regex }}$')
web2ldap.app.plugins.aedir.AEUserUid.maxGenTrials = {{ aedir_username_gen_trials }}L
# aeService entries
web2ldap.app.plugins.aedir.AEUserUid.reObj = re.compile('^{{ aedir_aeservice_uid_regex }}$')

# for using only uid for login
import web2ldap.ldapsession
web2ldap.ldapsession.LDAPSession = web2ldap.app.plugins.aedir.AEDirLDAPSession

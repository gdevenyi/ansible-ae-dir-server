#!{{ aedir_python }}
# -*- coding: utf-8 -*-
"""
Sets the password of the specified aeUser/aeService or aeHost entry
referenced by uid or host attribute

This script must run locally on a Ã†-DIR provider
"""

__version__ = '0.0.3'

import sys
import os
import getpass

# set LDAPRC env var *before* importing ldap
os.environ['LDAPRC'] = '/opt/ae-dir/etc/ldap.conf'
import ldap0
from ldap0.pw import random_string
from ldap0.filter import escape_filter_chars

import aedir

PYLDAP_TRACE_LEVEL = int(os.environ.get('PYLDAP_TRACE_LEVEL', '0'))

#---------------------------------------------------------------------------
# main()
#---------------------------------------------------------------------------

logger = aedir.init_logger(log_name=sys.argv[0])

logger.info('Starting %s %s', sys.argv[0], __version__)
logger.debug('Imported aedir %s', aedir.__version__)

ldap0._trace_level = PYLDAP_TRACE_LEVEL

try:
    arg_value = sys.argv[1]
except IndexError:
    sys.stderr.write('Usage: {} <username|hostname>\n'.format(sys.argv[0]))
    sys.exit(9)

ldap_filter = aedir.AUTHC_ENTITY_FILTER_TMPL.format(escape_filter_chars(arg_value))

ldap_conn = aedir.AEDirObject(None, trace_level=PYLDAP_TRACE_LEVEL)
logger.debug('successfully connected to %r as %r', ldap_conn._uri, ldap_conn.whoami_s())
aedir_search_base = ldap_conn.find_search_base()

logger.debug(
    'Search with ldap_filter = %r; aedir_search_base = %r',
    ldap_filter,
    aedir_search_base,
)
try:
    dn, entry = ldap_conn.find_unique_entry(
        aedir_search_base,
        scope=ldap0.SCOPE_SUBTREE,
        filterstr=ldap_filter,
        attrlist=['pwdPolicySubentry'],
    )
except ldap0.ldapobject.NO_UNIQUE_ENTRY as ldap_err:
    logger.error(str(ldap_err))
    sys.exit(2)
else:
    logger.debug('Found: dn = %r; entry = %r', dn, entry)

try:
    pwd_policy_subentry = entry['pwdPolicySubentry'][0]
except KeyError:
    logger.debug('Could not determine password policy entry')
    pwd_min_length = 0
else:
    logger.debug('Read password policy entry %r', pwd_policy_subentry)
    pwd_policy = ldap_conn.read_s(
        pwd_policy_subentry,
        filterstr='(objectClass=pwdPolicy)',
        attrlist=['pwdMinLength'],
    )
    pwd_min_length = int(pwd_policy.get('pwdMinLength', ['0'])[0])

new_password1 = getpass.getpass(
    'Enter new password for {} (empty generates password): '.format(dn)
)

if new_password1:
    # check minimum password length
    if len(new_password1) < pwd_min_length:
        sys.stderr.write('Minimum required password length is %d (see %s)!\n' % (
            pwd_min_length,
            pwd_policy_subentry,
        ))
        sys.exit(1)
    # ask to repeat password input
    new_password2 = getpass.getpass('repeat password: ')
    if new_password1 != new_password2:
        sys.stderr.write('2nd input for new password differs!\n')
        sys.exit(1)
else:
    # empty password input => generate random password
    new_password2 = random_string(length=max(aedir.PWD_LENGTH, pwd_min_length))
    sys.stdout.write('Generated password: %s\n' % (new_password2))

try:
    ldap_conn.passwd_s(dn, None, new_password2)
except ldap0.LDAPError as ldap_err:
    logger.error('LDAPError setting password: %s', ldap_err)
    sys.exit(1)
else:
    logger.info('Successfully set password of entry %r', dn)

ldap_conn.unbind_s()

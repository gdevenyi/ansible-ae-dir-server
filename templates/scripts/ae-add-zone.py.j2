#!{{ aedir_python }}
# -*- coding: utf-8 -*-
"""
Adds a zone with the two role groups for zone admins and zone auditors and
an init tag

This script must run locally on a Ã†-DIR provider
"""

from __future__ import absolute_import

__version__ = '0.0.3'

import sys
import os
import random

# set LDAPRC env var *before* importing ldap
os.environ['LDAPRC'] = '/opt/ae-dir/etc/ldap.conf'
import ldap0
import aedir

LDAP0_TRACE_LEVEL = int(os.environ.get('LDAP0_TRACE_LEVEL', '0'))

#---------------------------------------------------------------------------
# main()
#---------------------------------------------------------------------------

logger = aedir.init_logger(log_name=sys.argv[0])

logger.info('Starting %s %s', sys.argv[0], __version__)
logger.debug('Imported aedir %s', aedir.__version__)

ldap0._trace_level = LDAP0_TRACE_LEVEL

try:
    zone_cn, ticket_id, zone_desc = [
        arg.decode().encode('utf-8')
        for arg in sys.argv[1:]
    ]
except Exception, err:
    logger.error('Error: %s', err)
    sys.stderr.write(
        '\n\nUsage: {} <zone name> <ticket ID> <description>\n'.format(
            sys.argv[0]
        )
    )
    sys.exit(9)

ldap_conn = aedir.AEDirObject(None, trace_level=LDAP0_TRACE_LEVEL)
aedir_searchbase = ldap_conn.find_search_base()

try:
    ldap_result = ldap_conn.read_s(
        'cn={zone_cn},{aedir_searchbase}'.format(**vars()),
    )
except ldap0.NO_SUCH_OBJECT:
    pass
else:
    logger.error('Zone %r already exists', zone_cn)
    sys.exit(9)

# add zone entry
zone_dn = 'cn={zone_cn},{aedir_searchbase}'.format(**vars())
ldap_conn.add_s(
    zone_dn,
    {
        'objectClass': ['namedObject', 'aeObject', 'aeZone'],
        'aeStatus': ['0'],
        'cn': [zone_cn],
        'aeTicketId': [ticket_id],
        'description': [zone_desc],
    }
)
logger.info('Added %r', zone_dn)

# add init tag entry
tag_dn = 'cn={zone_cn}-init,{zone_dn}'.format(**vars())
ldap_conn.add_s(
    tag_dn,
    {
        'objectClass': ['namedObject', 'aeTag'],
        'aeStatus': ['0'],
        'cn': [zone_cn+'-init'],
        'description': ['Initialization of "{zone_desc}"'.format(**vars())],
    }
)
logger.info('Added %r', tag_dn)

# add zone admins group entry
zone_admins_dn = 'cn={zone_cn}-zone-admins,{zone_dn}'.format(**vars())
ldap_conn.add_s(
    zone_admins_dn,
    {
        'objectClass': [
            'aeObject',
            'groupOfEntries',
            'posixGroup',
            'aeGroup'
        ],
        'aeStatus': ['0'],
        'aeTag': [zone_cn+'-init'],
        'cn': [zone_cn+'-zone-admins'],
        'aeTicketId': [ticket_id],
        'description': [
            "Group members are zone admins who can manage zone '{zone_cn}'".format(**vars())
        ],
        'gidNumber': [str(ldap_conn.get_next_id(id_pool_dn=aedir_searchbase, id_pool_attr='gidNumber'))],
    }
)
logger.info('Added %r', zone_admins_dn)

# add zone auditors group entry
zone_auditors_dn = 'cn={zone_cn}-zone-auditors,{zone_dn}'.format(**vars())
ldap_conn.add_s(
    zone_auditors_dn,
    {
        'objectClass': [
            'aeObject',
            'groupOfEntries',
            'posixGroup',
            'aeGroup'
        ],
        'aeStatus': ['0'],
        'aeTag': [zone_cn+'-init'],
        'cn': [zone_cn+'-zone-auditors'],
        'aeTicketId': [ticket_id],
        'description': ["Group members are zone auditors who can read zone '{zone_cn}'".format(**vars())],
        'gidNumber': [str(ldap_conn.get_next_id(id_pool_dn=aedir_searchbase, id_pool_attr='gidNumber'))],
    }
)
logger.info('Added %r', zone_auditors_dn)

# add init tag to zone entry
ldap_conn.modify_s(
    zone_dn,
    [
        (ldap0.MOD_ADD, 'aeTag', [zone_cn+'-init']),
        (ldap0.MOD_ADD, 'aeZoneAdmins', [zone_admins_dn]),
        (ldap0.MOD_ADD, 'aeZoneAuditors', [zone_auditors_dn]),
    ]
)
logger.info('Updated %r', zone_dn)

ldap_conn.unbind_s()

#!{{ aedir_python }}
# -*- coding: utf-8 -*-
"""
Adds a zone with the two role groups for zone admins and zone auditors and 
an init tag

This script must run locally on a Ã†-DIR provider
"""

__version__ = '0.0.2'

import sys
import os
import random

# set LDAPRC env var *before* importing ldap
os.environ['LDAPRC'] = '/opt/ae-dir/etc/ldap.conf'
import ldap
import aedir

PYLDAP_TRACE_LEVEL = 0

#---------------------------------------------------------------------------
# main()
#---------------------------------------------------------------------------

ldap._trace_level = PYLDAP_TRACE_LEVEL

try:
    zone_cn, ticket_id, zone_desc = [
        arg.decode().encode('utf-8')
        for arg in sys.argv[1:]
    ]
except Exception, err:
    sys.stderr.write('Error: {}\n\n'.format(str(err)))
    sys.stderr.write(
        'Usage: {} <zone name> <ticket ID> <description>\n'.format(
            sys.argv[0]
        )
    )
    sys.exit(9)

ldap_conn = aedir.AEDirObject(None, trace_level=PYLDAP_TRACE_LEVEL)
aedir_searchbase = ldap_conn.find_search_base()

try:
    ldap_result = ldap_conn.read_s(
        'cn={zone_cn},{aedir_searchbase}'.format(**vars()),
    )
except ldap.NO_SUCH_OBJECT:
    pass
else:
    sys.stderr.write('Zone {} already exists\n'.format(zone_cn))
    sys.exit(9)

zone_dn = 'cn={zone_cn},{aedir_searchbase}'.format(**vars())

# add zone entry
ldap_conn.add_s(
    zone_dn,
    [
        ('objectClass', ['namedObject', 'aeObject', 'aeZone']),
        ('aeStatus', ['0']),
        ('cn', [zone_cn]),
        ('aeTicketId', [ticket_id]),
        ('description', [zone_desc]),
    ]
)

# add init tag entry
ldap_conn.add_s(
    'cn={zone_cn}-init,{zone_dn}'.format(**vars()),
    [
        ('objectClass', ['namedObject', 'aeTag']),
        ('aeStatus', ['0']),
        ('cn', [zone_cn+'-init']),
        ('description', ['Initialization of "{zone_desc}"'.format(**vars())]),
    ]
)

# add init tag to zone entry
ldap_conn.modify_s(
    zone_dn,
    [(ldap.MOD_ADD, 'aeTag', [zone_cn+'-init'])]
)

# add zone admins group entry
ldap_conn.add_s(
    'cn={zone_cn}-zone-admins,{zone_dn}'.format(**vars()),
    [
        (
            'objectClass',
            [
                'aeObject',
                'groupOfEntries',
                'posixGroup',
                'aeGroup'
            ]
        ),
        ('aeStatus', ['0']),
        ('aeTag', [zone_cn+'-init']),
        ('cn', [zone_cn+'-zone-admins']),
        ('aeTicketId', [ticket_id]),
        ('description', [
            "Group members are zone admins who can manage zone '{zone_cn}'".format(**vars())
        ]),
        ('gidNumber', [str(random.randint(30000, 59999))]),
    ]
)

# add zone auditors group entry
ldap_conn.add_s(
    'cn={zone_cn}-zone-auditors,{zone_dn}'.format(**vars()),
    [
        (
            'objectClass',
            [
                'aeObject',
                'groupOfEntries',
                'posixGroup',
                'aeGroup'
            ]
        ),
        ('aeStatus', ['0']),
        ('aeTag', [zone_cn+'-init']),
        ('cn', [zone_cn+'-zone-auditors']),
        ('aeTicketId', [ticket_id]),
        ('description', ["Group members are zone auditors who can read zone '{zone_cn}'".format(**vars())]),
        ('gidNumber', [str(random.randint(30000, 59999))]),
    ]
)

ldap_conn.unbind_s()

# define constants for general some regex prefixes
const SLAPD_CONN /^.* {{ openldap_service_name }}\[\d+\]: conn=(?P<conn>\d+) /
const SLAPD_OP // + SLAPD_CONN + /op=(?P<op>\d+)( | \[(|IP=[^ ]+)[ ]*(|NAME=[^ ]+)[ ]*(|USERNAME=[^ ]+)\] )/
const SLAPD_FD // + SLAPD_CONN + /fd=(?P<fd>\d+) /

# count RESULT lines with type (tag=) and LDAP result code (err=)
#---------------------------------------------------------------------------

counter slapd_result_count by tag, err

const SLAPD_RESULT // + SLAPD_OP + /.*RESULT tag=(?P<tag>\d+) (oid=(?P<oid>\d+) )*err=(?P<err>\d+) (nentries=(?P<nentries>\d+) )*text=.*$/

// + SLAPD_RESULT {
    slapd_result_count[$tag, $err]++
}

# count request lines
#---------------------------------------------------------------------------

counter slapd_req_count by rtype

const SLAPD_REQUEST // + SLAPD_OP + /(?P<rtype>(BIND|UNBIND|ADD|MOD|DEL|EXT|WHOAMI|PASSMOD|SRCH)) .*$/

// + SLAPD_REQUEST {
    slapd_req_count[$rtype]++
}

# count ACCEPT lines with source and destination address
#---------------------------------------------------------------------------

counter slapd_conn_count by src, dst

const SLAPD_ACCEPT_FROM // + SLAPD_FD + /ACCEPT from /

# count TCP/IP (LDAP and LDAPS) connections
const SLAPD_ACCEPT_IP // + SLAPD_ACCEPT_FROM + /IP=(?P<src>.+):\d+ \(IP=(?P<dst>.+)\)$/

// + SLAPD_ACCEPT_IP {
    slapd_conn_count[$src, $dst]++
}

# count LDAPI connections
const SLAPD_ACCEPT_PATH // + SLAPD_ACCEPT_FROM + /PATH=(?P<src>[^ ]+) \(PATH=(?P<dst>.+)\)$/

// + SLAPD_ACCEPT_PATH {
    slapd_conn_count["ldapi", $dst]++
}

# count "deferring" messages
#---------------------------------------------------------------------------

counter slapd_deferring_operation by defer_type

const SLAPD_DEFERRING /^.* {{ openldap_service_name }}\[\d+\]: connection_input: conn=(?P<conn>\d+) deferring operation: (?P<defer_type>.+)$/

// + SLAPD_DEFERRING {
    slapd_deferring_operation[$defer_type]++
}

#!{{ aedir_python }}
# -*- coding: utf-8 -*-
"""
This CRON script performs two tasks:
1. Remove expired msPwdResetObject attributes
2. Send welcome e-mail to new users which have not set a password yet

Author: Michael Ströder <michael@stroeder.com>
"""

__version__ = '0.0.4'

# from Python's standard lib
import sys
import os
import time
import socket
import smtplib
import logging
from calendar import timegm
import email.utils
from socket import gethostbyname, getfqdn

# from python-ldap
import ldap

# the separate mailutil module
import mailutil

# the separate python-aedir module
import aedir

#-----------------------------------------------------------------------
# Configuration constants
#-----------------------------------------------------------------------

# Import constants from configuration module
sys.path.extend([
    '{{ aedir_etc }}/aedirpwd',
])
from aedirpwd_cnf import *

# Timeout in seconds when connecting to local and remote LDAP servers
# used for ldap.OPT_NETWORK_TIMEOUT and ldap.OPT_TIMEOUT
LDAP_TIMEOUT = 10.0

# Number of times connecting to LDAP is tried
LDAP_MAXRETRYCOUNT = 4

# Logging level
if os.environ.get('DEBUG', 'no') == 'yes':
    LOG_LEVEL = logging.DEBUG
else:
    LOG_LEVEL = logging.WARN

# Logging format
LOG_FORMAT = '%(asctime)s %(levelname)s %(message)s'

SERVER_ID = '{0:03x}'.format(int('{{ openldap_server_id }}'))

# hostname to use in URLs generated in notification e-mails
WEB_CTX_HOST = '{{ aedir_main_provider_hostname }}'

# Filter string templates
FILTERSTR_EXPIRE = (
    ur'(&'
        '(objectClass=msPwdResetObject)'
        '(!(msPwdResetExpirationTime={currenttime}))'
        '(msPwdResetExpirationTime<={currenttime})'
      ')'
)
FILTERSTR_NOPASSWORD = (
    ur'(&'
        '(objectClass=aeUser)'
        '(aeStatus=0)'
        '(uid=*)'
        '(mail=*)'
        '(entryCSN:CSNSIDMatch:={serverid})'
        '(!'
          '(|'
            '(aeTag=ae-tag-welcome-sent)'
            '(objectClass=msPwdResetObject)'
            '(userPassword=*)'
            '(pwdChangedTime=*)'
          ')'
        ')'
        '(modifyTimestamp>={lasttime})(!(modifyTimestamp>={currenttime}))'
      ')'
)

# Maximum timespan to search for password-less entries in the past
#NOTIFY_OLDEST_TIMESPAN = 7200.0
NOTIFY_OLDEST_TIMESPAN = 30*86400.0

# Where to store the last run timestamp
NOTIFY_STATE_FILENAME = '{{ aedir_rundir }}/aepwd_cron.state'

# E-Mail subject for notification message
NOTIFY_EMAIL_SUBJECT = u'New Æ-DIR account "{user_uid}" added for {user_cn}'
# E-Mail body template file for notification message
NOTIFY_EMAIL_TEMPLATE = '{{ aedir_etc }}/aedirpwd/templates/en/notify_user.txt'

# modifications to be applied to user entry after successfully sending e-mail
NOTIFY_SUCCESSFUL_MOD = [
  (ldap.MOD_ADD, 'aeTag', ['ae-tag-welcome-sent'])
]

#-----------------------------------------------------------------------
# Classes and functions
#-----------------------------------------------------------------------


def run():
    """
    the main function
    """
    script_name = sys.argv[0]

    my_logger = logging.getLogger(script_name)
    my_stream_formatter = logging.Formatter(fmt=LOG_FORMAT)
    my_stream_handler = logging.StreamHandler()
    my_stream_handler.setFormatter(my_stream_formatter)
    my_logger.addHandler(my_stream_handler)
    my_logger.setLevel(LOG_LEVEL)

    host_fqdn = getfqdn()
    server_id = SERVER_ID
    my_logger.debug(
        'Starting %s %s on %s (%s)',
        script_name,
        __version__,
        host_fqdn,
        server_id,
    )

    # Determine oldest possible last timestamp (sounds strange, yeah!)
    current_time = time.time()
    oldest_last_run_timestr = aedir.ldap_strf_secs(
        current_time-NOTIFY_OLDEST_TIMESPAN
    )
    try:
        last_run_timestr = open(NOTIFY_STATE_FILENAME, 'rb').read().strip()
    except IOError, io_error:
        my_logger.warn(
            'Error reading file %r: %s',
            NOTIFY_STATE_FILENAME,
            io_error
        )
        last_run_timestr = oldest_last_run_timestr
    else:
        my_logger.debug(
            'Read last run timestamp %r from file %r',
            last_run_timestr,
            NOTIFY_STATE_FILENAME
        )
        if oldest_last_run_timestr > last_run_timestr:
            my_logger.warn(
                'Timestamp read from file %r too old => ignoring',
                NOTIFY_STATE_FILENAME
            )
            last_run_timestr = oldest_last_run_timestr

    my_logger.debug(
        'oldest_last_run_timestr = %r',
        oldest_last_run_timestr
    )

    try:
        ldap_conn = aedir.AEDirObject(PWD_LDAP_URL)
    except ldap.LDAPError, ldap_error:
        my_logger.error(
            'LDAPError during connecting to %r: %s',
            PWD_LDAP_URL,
            ldap_error,
        )
        sys.exit(1)
    else:
        my_logger.info(
            'Successfully bound to %r as %r',
            ldap_conn.ldap_url_obj,
            ldap_conn.whoami_s(),
        )

    current_run_timestr = aedir.ldap_strf_secs(current_time)

    filterstr_inputs_dict = {
        'currenttime':current_run_timestr,
        'lasttime':last_run_timestr,
        'serverid':server_id,
    }
    my_logger.debug('filterstr_inputs_dict = %s', filterstr_inputs_dict)

    # 1. Remove expired msPwdResetObject attributes
    #-----------------------------------------------------------------------

    expiration_filterstr = (
        FILTERSTR_EXPIRE.format(**filterstr_inputs_dict)
    ).encode('utf-8')

    ldap_results = ldap_conn.search_ext_s(
        ldap_conn.ldap_url_obj.dn,
        ldap_conn.ldap_url_obj.scope,
        filterstr=expiration_filterstr,
        attrlist=[
            'objectClass',
            'msPwdResetExpirationTime',
            'msPwdResetTimestamp',
            'msPwdResetAdminPw',
        ],
    )

    for ldap_dn, ldap_entry in ldap_results:

        my_logger.debug('Found %r: %r', ldap_dn, ldap_entry)

        # Prepare the modification list
        ldap_mod_list = [
            # explictly delete by value
            (
                ldap.MOD_DELETE,
                'objectClass',
                ['msPwdResetObject']
            ),
            (
                ldap.MOD_DELETE,
                'msPwdResetTimestamp',
                [ldap_entry['msPwdResetTimestamp'][0]]
            ),
            (
                ldap.MOD_DELETE,
                'msPwdResetExpirationTime',
                [ldap_entry['msPwdResetExpirationTime'][0]]
            ),
            # delete whole value no matter what
            (ldap.MOD_DELETE, 'msPwdResetEnabled', None),
            (ldap.MOD_DELETE, 'msPwdResetPasswordHash', None),
        ]
        if PWD_ADMIN_LEN or 'msPwdResetAdminPw' in ldap_entry:
            ldap_mod_list.append(
                (ldap.MOD_DELETE, 'msPwdResetAdminPw', None),
            )

        # Actually perform the modify operation
        try:
            ldap_conn.modify_s(ldap_dn, ldap_mod_list)
        except ldap.LDAPError, ldap_error:
            my_logger.warn(
                'LDAPError removing msPwdResetObject attrs in %r: %s',
                ldap_dn,
                ldap_error
            )
        else:
            my_logger.info(
                'Removed msPwdResetObject attributes from %r',
                ldap_dn,
            )


    # 2. Send welcome e-mail to new users which have not set a password yet
    #-----------------------------------------------------------------------

    nopassword_filterstr = (
        FILTERSTR_NOPASSWORD.format(**filterstr_inputs_dict)
    ).encode('utf-8')

    my_logger.debug(
        'Searching users without password with %r',
        nopassword_filterstr,
    )
    ldap_results = ldap_conn.search_ext_s(
        ldap_conn.ldap_url_obj.dn,
        ldap_conn.ldap_url_obj.scope,
        filterstr=nopassword_filterstr,
        attrlist=[
            'objectClass',
            'uid',
            'cn',
            'displayName',
            'description',
            'mail',
            'creatorsName',
            'modifiersName'
        ],
    )

    if ldap_results:

        notification_counter = 0

        my_logger.debug(
            'Open SMTP connection to %r from %r',
            SMTP_URL,
            SMTP_LOCALHOSTNAME
        )
        smtp_conn = mailutil.smtp_connection(
            SMTP_URL, local_hostname=SMTP_LOCALHOSTNAME,
            tls_args=SMTP_TLSARGS,
            debug_level=SMTP_DEBUGLEVEL
        )

        for ldap_dn, ldap_entry in ldap_results:

            to_addr = ldap_entry['mail'][0].decode('utf-8')
            my_logger.debug(
                'Prepare notification for %r sent to %r',
                ldap_dn,
                to_addr,
            )
            default_headers = (
                ('From', SMTP_FROM),
                ('Date', email.utils.formatdate(time.time(), True)),
            )
            smtp_message_tmpl = open(
                NOTIFY_EMAIL_TEMPLATE, 'rb'
            ).read().decode('utf-8')
            user_data_user = {
                'ldap_uri':str(ldap_conn.ldap_url_obj.initializeUrl()),
                'user_uid':ldap_entry['uid'][0].decode('utf-8'),
                'user_cn':ldap_entry.get('cn', [''])[0].decode('utf-8'),
                'user_displayname':ldap_entry.get(
                    'displayName', ['']
                )[0].decode('utf-8'),
                'user_description':ldap_entry.get(
                    'description', ['']
                )[0].decode('utf-8'),
                'emailadr':to_addr,
                'fromaddr':SMTP_FROM,
                'user_dn':ldap_dn.decode('utf-8'),
                'web_ctx_host':(
                    WEB_CTX_HOST or host_fqdn
                ).decode('ascii'),
                'app_path_prefix':APP_PATH_PREFIX,
                'admin_cn':u'unknown',
                'admin_mail':u'unknown',
            }

            for admin_dn_attr in ('modifiersName', 'creatorsName'):
                admin_dn = ldap_entry[admin_dn_attr][0]
                if admin_dn == ldap_dn:
                    continue
                try:
                    admin_entry = ldap_conn.read_s(
                        admin_dn,
                        filterstr=FILTERSTR_USER.encode('utf-8'),
                        attrlist=['objectClass', 'uid', 'cn', 'mail'],
                    )
                except ldap.LDAPError, ldap_error:
                    my_logger.debug(
                        'LDAPError reading %r: %r: %s',
                        admin_dn_attr,
                        ldap_entry[admin_dn_attr][0],
                        ldap_error
                    )
                else:
                    if admin_entry is None:
                        my_logger.debug(
                            'No real admin referenced in %r: %r',
                            admin_dn_attr,
                            ldap_entry[admin_dn_attr][0]
                        )
                        continue
                    user_data_user['admin_cn'] = admin_entry.get(
                        'cn', ['']
                    )[0].decode('utf-8')
                    user_data_user['admin_mail'] = admin_entry.get(
                        'mail', ['']
                    )[0].decode('utf-8')
                    my_logger.debug(
                        'Admin displayName read from %r: %r',
                        admin_dn_attr,
                        user_data_user['admin_cn']
                    )
                    break

            smtp_message = smtp_message_tmpl.format(**user_data_user)
            smtp_subject = NOTIFY_EMAIL_SUBJECT.format(**user_data_user)
            my_logger.debug('smtp_subject = %r', smtp_subject)
            my_logger.debug('smtp_message = %r', smtp_message)
            try:
                smtp_conn.send_simple_message(
                    SMTP_FROM,
                    [to_addr.encode('utf-8')],
                    'utf-8',
                    default_headers+(
                        ('Subject', smtp_subject),
                        ('To', to_addr),
                    ),
                    smtp_message,
                )
            except smtplib.SMTPRecipientsRefused, smtp_error:
                my_logger.error(
                    'Recipient %r rejected: %s',
                    to_addr,
                    smtp_error
                )
                continue
            else:
                my_logger.info(
                    'Sent notification for user %r with e-mail address %r',
                    user_data_user['user_displayname'],
                    to_addr,
                )
                if NOTIFY_SUCCESSFUL_MOD:
                    ldap_conn.modify_s(ldap_dn, NOTIFY_SUCCESSFUL_MOD)
                notification_counter += 1

        my_logger.info('Sent %d notifications', notification_counter)
        my_logger.debug('Close SMTP connection to %r', SMTP_URL)
        smtp_conn.quit()

    else:

        my_logger.info('No results => no notifications')

    # Close LDAP connection
    ldap_conn.unbind_s()

    # Write the last run timestamp
    try:
        open(NOTIFY_STATE_FILENAME, 'wb').write(current_run_timestr)
    except Exception, err:
        my_logger.error('Error writing file %r: %s',
        NOTIFY_STATE_FILENAME,
        err,
    )
    else:
        my_logger.debug(
            'Wrote timestamp %r to file %r',
            current_run_timestr,
            NOTIFY_STATE_FILENAME,
        )

    sys.exit(0)
    return # end of run()

if __name__ == '__main__':
    run()

{% extends aedir_htdocs_layout %}

{% block head_title %}Next steps / to-do list{% endblock %}
{% block head_pagedescription %}To-do items, ideas, next steps{% endblock %}

{% block content %}

<p>
  In no particular order...
</p>

<ol>
  <li><a href="#sso">WebSSO</a></li>
  <li><a href="#pki">PKI</a></li>
  <li><a href="#devops">DevOps tooling</a></li>
  <li><a href="#logging">Logging</a></li>
  <li><a href="#pxe">PXE/DHCP/TFTP integration</a></li>
  <li><a href="#nac">Network Access Control (NAC)</a></li>
  <li><a href="#radius">RADIUS</a></li>
  <li><a href="#dns">DNS</a></li>
  <li><a href="#ui">User Interface</a></li>
  <li><a href="#mod-security">ModSecurity</a></li>
  <li><a href="#cli">Command-line tool</a></li>
  <li><a href="#browser">Browser integration/security</a></li>
  <li><a href="#python3">Python 3.x</a></li>
  <li><a href="#compliance">Compliance checks</a></li>
</ol>

<h1 id="sso">WebSSO</h1>
<p>
  Custom IdP implementation supporting SAML 2.0, OAuth 2.0, Open ID Connect
  checking login relationship of user and service based on
  <a href="docs.html#schema-oc-aeSrvGroup">aeSrvGroup - aeLoginGroups</a>.
</p>
<p>
  Python modules to be used:
  <a href="https://pypi.python.org/pypi/pysaml2">pysaml2</a>,
  <a href="https://pypi.python.org/pypi/oic">oic</a>,
  <a href="https://pypi.python.org/pypi/pyop">pyop</a>
</p>

<h1 id="pki">PKI</h1>

<h2 id="x509">X.509</h2>
<ul>
  <li>
    Issue server certs to
    <a href="docs.html#schema-oc-aeHost">aeHost</a>,
    <a href="docs.html#schema-oc-aeNwDevice">aeNwDevice</a>,
    <a href="docs.html#schema-oc-aeService">aeService</a> or
    <a href="docs.html#schema-oc-aeSrvGroup">aeSrvGroup</a>
    based on authorization of role
    <a href="docs.html#role-setup-admins">Setup Admins</a>
  </li>
  <li>
    see also <a href="https://ldapcon.org/2017/x-509-pki-ra-schema-for-ae-dir/">
    LDAPcon 2017 talk: X.509 PKI RA schema for Ã†-DIR</a>
  </li>
  <li>
    direct ansible integration for server cert enrollment
  </li>
  <li>
    X.509 cert enrollment for <a href="docs.html#schema-oc-aeUser">aeUser</a>
    with <a href="#mfa">multi-factor authc</a>
  </li>
  <li>
    remote CA keys
    (e.g. based on <a href="https://github.com/leifj/pyeleven">pyeleven</a>
    and <a href="https://github.com/LudovicRousseau/PyKCS11">PyKCS11</a>)
  </li>
  <li>
    Are there ready-to-use PKI backend solutions in Python?
    <ul>
      <li>
        <a href="https://github.com/laurivosandi/certidude">certidude</a>
      </li>
    </ul>
  </li>
</ul>

<h1 id="devops">DevOps tooling</h1>
<ul>
  <li>
    Scripts for local <em>slapd-ldap</em> instance used as admin proxy for
    bulk operations from local tools.
  </li>
</ul>

<h2 id="ansible">ansible</h2>
<ul>
  <li>
    Automated authentication configuration (add entry, set <var>userPassword</var>) for
    <a href="docs.html#schema-oc-aeHost">aeHost</a> and
    <a href="docs.html#schema-oc-aeService">aeService</a> with an
    <a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html#developing-modules-general">ansible module</a>.
  </li>
  <li>
    <a href="https://docs.ansible.com/ansible/developing_inventory.html">
    Dynamic inventory</a> plugin for accessing attributes in
    &AElig;-DIR entries
  </li>
</ul>

<h1 id="logging">Logging</h1>
<ul>
  <li>
    Log performance data as
    <a href="https://docs.graylog.org/en/2.2/pages/gelf.html">Graylog Extended Log Format (GELF)</a>
  </li>
  <li>
    The web applications should use Python's <em>logging module</em>
    and file <em>ae-logging.conf</em>
  </li>
  <li>
    Add
    <a href="https://github.com/blue-yonder/cee_syslog_handler">cee_syslog_handler</a>
    in file <em>ae-logging.conf</em>
  </li>
</ul>

<h1 id="pxe">PXE/DHCP/TFTP integration</h1>
<ul>
  <li>
    Extend one of the following Python demon implementations to look up
    correct boot config in &AElig;-DIR:
    <ul>
      <li>
        <a href="https://github.com/mpetazzoni/ptftpd">ptftpd</a> (GPLv3)
      </li>
      <li>
        <a href="https://github.com/psychomario/PyPXE">PyPXE</a> (MIT License)
      </li>
    </ul>
  </li>
  <li>
    make use of <a href="docs.html#schema-oc-aeNwDevice">aeNwDevice</a>
  </li>
</ul>

<h1 id="nac">Network Access Control (NAC)</h1>
<ul>
  <li>
    <a href="https://en.wikipedia.org/wiki/IEEE_802.1X">IEEE 802.1X</a>
  </li>
  <li>
    <a href="https://libvirt.org/formatnwfilter.html">libvirt network filters</a>
  </li>
  <li>
    make use of <a href="docs.html#schema-oc-aeNwDevice">aeNwDevice</a>
  </li>
</ul>

<h1 id="radius">RADIUS</h1>
<p>
  Support for RADIUS with dynamic RADIUS client configuration
  (see also <a href="#nac">NAC</a>).
</p>
<ul>
  <li>
    <a href="https://freeradius.org/">FreeRADIUS</a>:
    has many features, basic LDAP authc out-of-the-box
  </li>
  <li>
    <a href="http://www.bsdradius.org/">BSDRadius</a>:
    needs own module
  </li>
  <li>
    thin implementation based on
    <a href="https://github.com/wichert/pyrad">pyrad</a>
  </li>
</ul>

<h1 id="dns">DNS</h1>
<ul>
  <li>
    use PowerDNS to serve attributes as DNS RRs to augment regular DNS service:
    <ul>
      <li><a href="docs.html#schema-oc-aeHost">aeHost</a> (A and PTR)</li>
      <li><a href="docs.html#schema-oc-aeNwDevice">aeNwDevice</a> (A and PTR)</li>
      <li><a href="docs.html#schema-oc-aeZone">aeZone</a> (SOA)</li>
    </ul>
  </li>
  <li>
    <a href="http://jpmens.net/2015/11/03/powerdns-with-the-remote-back-end-and-dnssec/">
    use remote backend (preferrably with DNSSEC)</a> via
    <a href="https://github.com/cmouse/pdns-remotebackend-python">pdns-remotebackend-python</a>
  </li>
</ul>

<h1 id="ui">User Interface</h1>
<ul>
  <li>
    specific web application for administrative use-cases
  </li>
  <li>
    <a href="https://falconframework.org/">falcon</a> with
    <a href="http://jinja.pocoo.org/">Jinja2</a>
  </li>
  <li>
    Simple reporting use-cases (expired objects etc.).
  </li>
  <li>
    Graph reporting of data structures in a zone.
  </li>
</ul>

<h1 id="mod-security">ModSecurity</h1>
<p>
  Define a ruleset for <a href="https://www.modsecurity.org/">ModSecurity</a>.
</p>

<h1 id="cli">Command-line tool</h1>
<ul>
  <li>
    Consolidate various command-line tools into one tool with sub-commands
    within Python module package <a href="python.html">aedir</a>.
  </li>
  <li>
    Implement following use-cases:
    <ul>
      <li>Add <var>aeHost</var> entries</li>
      <li>Set password (replace <var>ae-passwd.py</var>)</li>
    </ul>
  </li>
</ul>

<h1 id="browser">Browser integration/security</h1>
<ul>
  <li>
    Make use of <em>Subresource Integrity</em> either with
    ansible-generated hashes or on-the-fly-generation in the web app(s):
    <ul>
      <li>
        <a href="https://www.w3.org/TR/SRI/">Subresource Integrity - W3C Recommendation</a>
      </li>
      <li>
        <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">
          Using Subresource Integrity | Mozilla Developer Network (MDN)</a>
      </li>
      <li>
        <a href="https://caniuse.com/subresource-integrity">
          Browser support (caniuse.com)</a>
      </li>
    </ul>
  </li>
</ul>

<h1 id="python3">Python 3.x</h1>
<ul>
  <li>
    Use <a href="https://falconframework.org/">falcon</a> with
    <a href="http://jinja.pocoo.org/">Jinja2</a>
    for the simple web apps
  </li>
  <li>
    Port modules <var>ldap0</var>, <var>slapdsock</var> and <var>aedir</var>
  </li>
</li>
</ul>

<h1 id="compliance">Compliance checks</h1>
<p>Prepare compliance statements:</p>
<ul>
  <li>
    <a href="https://benchmarks.cisecurity.org/downloads/latest/">CIS benchmarks</a>
  </li>
  <li>
    <a href="https://www.bsi.bund.de/DE/Themen/ITGrundschutz/ITGrundschutzKataloge/Inhalt/_content/baust/b05/b05020.html">BSI Grundschutz</a>
  </li>
</ul>
{% endblock content %}

#-----------------------------------------------------------------------
# initiate:   systemctl enable {{ slapdcheck_service_name }}.service
# start:      systemctl start {{ slapdcheck_service_name }}.service
# get status: systemctl status {{ slapdcheck_service_name }}.service
#
# {{ ansible_managed }}
#-----------------------------------------------------------------------

[Unit]
Description=slapdcheck - Run slapdcheck once
Requires=local-fs.target network.target
After=local-fs.target network.target

[Service]
Type=oneshot
{% if aedir_malloc_ld_preload %}
Environment=LD_PRELOAD={{ aedir_malloc_ld_preload }}
{% endif %}
Environment=LDAPNOINIT=1
# some env vars set for Python interpreter
ExecStart={{ aedir_python }} -m slapdcheck.{{ slapdcheck_module }} {{ aedir_etc }}/slapdcheck.cfg
ExecStart=chmod 0644 {{ slapdcheck_output_file }}.tmp
ExecStart=mv {{ slapdcheck_output_file }}.tmp {{ slapdcheck_output_file }}
StandardOutput=file:{{ slapdcheck_output_file }}.tmp
User={{ slapdcheck_user }}
Group={{ slapdcheck_group }}
KillSignal=SIGQUIT
CapabilityBoundingSet=CAP_SYS_PTRACE CAP_DAC_OVERRIDE
AmbientCapabilities=CAP_SYS_PTRACE CAP_DAC_OVERRIDE
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
WorkingDirectory={{ slapdcheck_rundir }}
ReadWritePaths={{ [slapdcheck_rundir, slapdcheck_output_file|dirname]|unique|join(' ') }}

{% if aedir_systemd_logging %}
# various logging options from ansible var aedir_systemd_logging
{% for systemd_option in aedir_systemd_logging %}
{{ systemd_option }}
{% endfor %}
{% endif %}
{% if aedir_systemd_hardening %}
# various hardening options from ansible var aedir_systemd_hardening
{% for systemd_option in aedir_systemd_hardening %}
{{ systemd_option }}
{% endfor %}
SystemCallFilter={{ systemd_systemcallfilter.slapdcheck }}
SystemCallLog={{ systemd_systemcalllog.slapdcheck }}
{% endif %}

[Install]
WantedBy=multi-user.target

#-----------------------------------------------------------------------
# initiate:   systemctl enable ae-dir-pwd.service
# start:      systemctl start ae-dir-pwd.service
# get status: systemctl status ae-dir-pwd.service
#
# {{ ansible_managed }}
#-----------------------------------------------------------------------

[Unit]
Description=ae-dir-pwd - AE-DIR password self-service web application
Requires=local-fs.target network.target
After=local-fs.target network.target

[Service]
Type=simple
{% if aedir_malloc_ld_preload %}
Environment=LD_PRELOAD={{ aedir_malloc_ld_preload }}
{% endif %}
Environment=LDAPNOINIT=1
# some env vars set for Python interpreter
{% for evar in aedir_python_env %}
Environment={{ evar.name }}={{ evar.value }}
{% endfor %}
Environment=AEDIRPWD_CFG={{ aedir_etc }}/ae-dir-pwd/aedirpwd_cnf.py
Environment=FLASK_ENV=production
ExecStartPre={{ rm_exec }} -f {{ aedir_rundir }}/ae-dir-pwd/ae-dir-pwd.sock
ExecStart={{ aedir_gunicorn }} --workers={{ aedir_pwd_workers }} "aedir_pproc.pwd.web.app:create_app()"
WorkingDirectory={{ aedir_rundir }}/ae-dir-pwd
ReadWritePaths={{ aedir_rundir }}/ae-dir-pwd
User=ae-dir-pwd
Group=ae-dir-pwd
KillSignal=SIGQUIT
CapabilityBoundingSet=
AmbientCapabilities=
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
{% if aedir_systemd_logging %}
# various logging options from ansible var aedir_systemd_logging
{% for systemd_option in aedir_systemd_logging %}
{{ systemd_option }}
{% endfor %}
{% endif %}
{% if aedir_systemd_hardening %}
# various hardening options from ansible var aedir_systemd_hardening
{% for systemd_option in aedir_systemd_hardening %}
{{ systemd_option }}
{% endfor %}
MemoryDenyWriteExecute={{ 'yes' if lsb_id != 'SUSE' or ansible_lsb.description == 'openSUSE Tumbleweed' else 'no' }}
SystemCallFilter={{ systemd_systemcallfilter.gunicorn }}
SystemCallLog={{ systemd_systemcalllog.gunicorn }}
{% endif %}
{% if apparmor_enabled %}
AppArmorProfile=ae-dir-pwd
{% endif %}

[Install]
WantedBy=multi-user.target

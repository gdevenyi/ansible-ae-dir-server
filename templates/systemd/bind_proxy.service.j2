#-----------------------------------------------------------------------
# initiate:   systemctl enable {{ systemd_oath_bind_listener }}.service
# start:      systemctl start {{ systemd_oath_bind_listener }}.service
# get status: systemctl status {{ systemd_oath_bind_listener }}.service
#
# {{ ansible_managed }}
#-----------------------------------------------------------------------

[Unit]
Description={{ systemd_oath_bind_listener }} - OATH-LDAP proxy bind listener
Requires=local-fs.target network.target
After=local-fs.target network.target

[Service]
Type=simple
{% if systemd_aedir_malloc_ld_preload %}
Environment=LD_PRELOAD={{ systemd_aedir_malloc_ld_preload }}
{% endif %}
Environment=LDAPNOINIT=1
# some env vars set for Python interpreter
{% for evar in systemd_aedir_python_env %}
Environment={{ evar.name }}={{ evar.value }}
{% endfor %}
ExecStart={{ systemd_aedir_python }} -m oathldap_srv.{{ systemd_oath_bind_listener }} {{ systemd_oath_ldap_cfg_dir }}/{{ systemd_oath_bind_listener }}/{{ systemd_oath_bind_listener }}.cfg
User={{ systemd_oath_listener_user }}
Group={{ systemd_oath_listener_user }}
CapabilityBoundingSet=
AmbientCapabilities=
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX
{% if systemd_aedir_systemd_logging %}
# various logging options from ansible var systemd_aedir_systemd_logging
{% for systemd_option in systemd_aedir_systemd_logging %}
{{ systemd_option }}
{% endfor %}
{% endif %}
{% if systemd_aedir_systemd_hardening %}
# various hardening options from ansible var systemd_aedir_systemd_hardening
{% for systemd_option in systemd_aedir_systemd_hardening %}
{{ systemd_option }}
{% endfor %}
{% endif %}
SystemCallFilter={{ systemd_systemcallfilter.slapdsock }}
{% if systemd_apparmor_enabled %}
AppArmorProfile={{ systemd_oath_bind_listener }}
{% endif %}

[Install]
WantedBy=multi-user.target

---
# defaults file for roles/ae-dir

#---------------------------------------------------------------------------
# pip install arguments
#---------------------------------------------------------------------------

aedir_pip_index_url: "https://pypi.python.org/simple"

aedir_pip_needs_compiler: "{{ aedir_pip_index_url == 'https://pypi.python.org/simple' }}"

aedir_pip_install_options:
  - "--upgrade"
  - "--index-url {{ aedir_pip_index_url }}"

aedir_pip_extra_args: "{{ aedir_pip_install_options|join(' ') }}"

#---------------------------------------------------------------------------
# AE-DIR parameters
#---------------------------------------------------------------------------

# map real LSB id to another LSB id to be used during plays
lsb_id_map:
  openSUSE: "SUSE"

# LSB id to be used during plays
lsb_id: "{{ lsb_id_map.get(ansible_lsb.id,ansible_lsb.id) }}"

# Perform init tasks: set to True only on the command-line when
# initializing an empty AE-DIR environment from scratch
aedir_init: False

# base DN / search root for AE-DIR entries
aedir_suffix: "ou=ae-dir"

# base DN / search root for accesslog entries
aedir_accesslog_suffix: "cn=accesslog-ae-dir"

# base DN / search root for session entries
aedir_session_suffix: "cn=ae-session"

# POSIX-GID number range served by AE-DIR
aedir_min_gid: 30000
aedir_max_gid: 59999

# POSIX-UID number range served by AE-DIR
aedir_min_uid: "{{ aedir_min_gid }}"
aedir_max_uid: "{{ aedir_max_gid }}"

# Parameters for generating user names
aedir_username_length: 4
aedir_username_gen_trials: 15
# Parameters for checking user names
aedir_username_minlen: "{{ aedir_username_length }}"
aedir_username_maxlen: "{{ aedir_username_length }}"

# Some paths for tools
aedir_prefix: "/opt/ae-dir"
aedir_bin: "{{ aedir_prefix }}/bin"
aedir_sbin: "{{ aedir_prefix }}/sbin"
aedir_etc: "{{ aedir_prefix }}/etc"
aedir_rundir: "{{ aedir_prefix }}/run"

# where to install systemd files
aedir_systemd_dir: "/etc/systemd/system"

aedir_platform_python:
  Debian: "{{ aedir_bin }}/python"
  SUSE: "/usr/bin/python"
aedir_python: "{{ aedir_platform_python[lsb_id] }} -ROO"

# regex patterns for enforcing naming conventions (substring match!)
# Important notes:
# - patterns are also used as substrings of more complex patterns => do not enclose in ^ and $
# - you should only *relax* patterns for an existing deployment with existing entries!
# attribute 'cn'
aedir_aezone_cn_regex: "[a-z0-9]+"
aedir_aegroup_cn_regex: "{{ aedir_aezone_cn_regex }}-[a-z0-9-]+"
aedir_aetag_cn_regex: "{{ aedir_aegroup_cn_regex }}"
aedir_aesudorule_cn_regex: "{{ aedir_aegroup_cn_regex }}"
aedir_aesrvgroup_cn_regex: "{{ aedir_aegroup_cn_regex }}"
# attribute 'uid'
aedir_aeuser_uid_regex: "[a-z]{{ '{' }}{{ aedir_username_minlen }},{{ aedir_username_maxlen }}{{ '}' }}"
aedir_aeservice_uid_regex: "[a-zA-Z0-9_.-]+"
# attribute 'aeTicketId'
aeticketid_regex: "[A-Z]+-[0-9]+"
# for entries beneath cn={{ aedir_org_zone }}
aedir_aeperson_uniqueid_regex: "[a-zA-Z0-9_.:/-]+"
aedir_aelocation_cn_regex: "[a-zA-Z0-9_.:/-]+"
aedir_aedept_deptnumber_regex: "[a-zA-Z0-9_.:/-]+"
# special regex policy rules for SSH public keys
# e.g. for specifying algorithms or naming conventions for key comment
aedir_aeservice_sshpubkey_regex: "(ssh-rsa|ssh-dss|ecdsa-sha2-nistp256|ssh-ed25519) [A-Za-z0-9+=/]+ .+"
aedir_aeuser_sshpubkey_regex: "(ssh-rsa|ssh-dss|ecdsa-sha2-nistp256|ssh-ed25519) [A-Za-z0-9+=/]+ .+"

# all valid directory prefixes for attribute 'homeDirectory'
# but without trailing slash
aedir_homedirectory_prefixes:
  - "/home"
#  - "/Users"

# magic value which make homeDirectory attribute invisible
aedir_homedirectory_hidden: "-/-"

# available values for attribute 'loginShell'
aedir_login_shells:
  - /bin/bash
  - /bin/true
  - /bin/false

# ticket identifier of initial ldapadd
aedir_init_ticket_id: "INIT-42"

# who clause for set-based ACL determining visibility of IP address
# attributes for hosts map
# 1. only aeHost can see own network devices
aedir_aenwdevice_visibility_set: "user & this/-1"
# 2. only aeHost beneath same aeSrvGroup can see host's  network devices
#aedir_aenwdevice_visibility_set: "user/-1 & this/-2"
# 3. only aeHost within same aeZone can see host's  network devices
#aedir_aenwdevice_visibility_set: "user/-2 & this/-3"

# Usernames and POSIX-UID/-GID numbers for system accounts of services
# running on providers and accessing AE-DIR via LDAPI
# Important notes:
# - uid_number/gid_number should be outside aedir_min_uid/aedir_max_uid range defined above
# - user names must match aedir_aeservice_uid_regex pattern defined above
# - do not remove items after initializing a AE-DIR deployment
# - special care needed for usernames used in OpenLDAP ACLs

aedir_ldapi_services:
#
#  # system user which must match UID/GID slapd is running as
#  - uid: ldap
#    cn: OpenLDAP slapd demon user
#    uid_number: 108
#    gid_number: 113
#    description: The system user for running OpenLDAP server process (slapd)
  # system user for password self-service web application
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-pwd:
    cn: Password self-service application
    uid_number: 998
    gid_number: 998
    description: The system user allowed to set attributes during user password reset (msPwdResetObject) over LDAPI
  # system user for sync processes
  ae-dir-peoplesync:
    cn: Personnel data sync process
    uid_number: 999
    gid_number: 999
    description: The system user allowed to maintain aePerson entries over LDAPI
  # system user for OTP registration/enrollment web application
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-otpenroll:
    cn: 2FA enrollment application
    uid_number: 997
    gid_number: 997
    description: The system user allowed to init OATH token entries over LDAPI
  # system user for OTP verification listener
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-otpverify:
    cn: OATH-LDAP validator demon
    uid_number: 996
    gid_number: 996
    description: The system user allowed to read shared secrets (OATH-LDAP)
  # system user for bind proxy listener
  ae-dir-bind-proxy:
    cn: OATH-LDAP bind proxy
    uid_number: 995
    gid_number: 995
    description: The system user used for simple bind proxy
  # system user for WebSSO component
  ae-dir-web-sso:
    cn: WebSSO component
    uid_number: 994
    gid_number: 994
    description: The system user used for WebSSO

# POSIX UID and GID which is mapped to rootdn
aedir_rootdn_uid_number: 0
aedir_rootdn_gid_number: 0

# which zone to use for aePerson and aeDept entries
# (must be listed in aedir_init_aezones below)
aedir_org_zone: people

# which zone to use for primary aeUser entries
# (must be listed in aedir_init_aezones below)
aedir_base_zone: base

# List of aeZone entries to be added to ae-dir-base.ldif
aedir_init_aezones:
  people:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "People and department entries"
  base:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "Primary office users and groups"
  otp:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "OTP tokens (OATH-LDAP)"
  test:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "Testing playground"

# template file used for generating gen_csr.cnf
aedir_gen_csr_cnf: "gen_csr.cnf.j2"

# List of aePerson entries to be added to ae-dir-base.ldif
aedir_init_aepersons:
  INIT-PERSON-ID-42:
    given_name: Michael
    sur_name: Ströder
    mail: michael@stroeder.com

# List of aeUser entries to be added to ae-dir-base.ldif
# - user names must match aedir_aeservice_uid_regex pattern defined above
# - unique_identifier has to be an entry in aedir_init_aepersons
aedir_init_aeadmins:
  - uid: msin
    unique_identifier: INIT-PERSON-ID-42
    description: initial Æ-DIR admin
    ticket_id: "{{ aedir_init_ticket_id }}"

aedir_hosts:
  # inventory host names of *all* provider hosts
  provider: "{{ groups['ae-dir-providers'] }}"
  # inventory host names of *all* consumer hosts
  consumer: "{{ groups['ae-dir-consumers'] }}"

# main provider hostname (e.g. for HA setups)
aedir_main_provider_hostname: "{{ aedir_hosts.provider[0] }}"

# aePerson attributes only readable by zone admins/auditors of people zone
aedir_confidential_person_attrs:
  - employeeNumber
  - aeNotBefore
  - aeNotAfter

# aePerson attributes readable by all base users
aedir_public_person_attrs:
  - cn
  - sn
  - givenName
  - mail
  - userCertificate

# Specifies whether a AE-DIR instance should send e-mail notifications to users or not
aedir_user_mail_enabled: "{{ aedir_hosts.provider[0]==ansible_fqdn }}"

# some stupid LDAP clients insist on searching user or group entries in
# separate container trees beneath the separately configured search root
# => always map to {{ aedir_suffix }}
#aedir_fake_search_roots:
#  - "ou=users"
#  - "ou=groups"
aedir_fake_search_roots: []

#---------------------------------------------------------------------------
# OpenLDAP parameters
#---------------------------------------------------------------------------

# replica role, must be either 'provider' or 'consumer'
openldap_role: "consumer"

# which repo to use for LTB OpenLDAP builds (Debian and RHEL/CentOS)
ltb_openldap_repo:
  Debian: "deb https://ltb-project.org/debian/{{ ansible_distribution_release }} {{ ansible_distribution_release }} main"
ltb_openldap_repo_source: "{{ ltb_openldap_repo[lsb_id] }}"

# default FQDN in LDAP service URL
openldap_service_fqdn: "{{ inventory_hostname }}"

# OS-specific maps
os_openldap_paths:
  Debian:
    # LTB-based installation
    openldap_prefix: /usr/local/openldap
    openldap_conf_prefix: /usr/local/openldap/etc/openldap
    openldap_data: /usr/local/openldap/var/openldap-data
    openldap_rundir: /usr/local/openldap/var/run
  SUSE:
    # openSUSE packages
    openldap_prefix: /usr
    openldap_conf_prefix: /etc/openldap
    openldap_data: /var/lib/ldap
    openldap_rundir: /var/run/slapd

# Some paths
openldap_prefix: "{{ os_openldap_paths[lsb_id].openldap_prefix }}"
openldap_bin: "{{ openldap_prefix }}/bin"
openldap_conf_prefix: "{{ os_openldap_paths[lsb_id].openldap_conf_prefix }}"
openldap_schema_prefix: "{{ openldap_conf_prefix }}/schema"
openldap_sbin: "{{ openldap_prefix }}/sbin"
openldap_defaults: "/etc/default/slapd"
openldap_rundir: "{{ os_openldap_paths[lsb_id].openldap_rundir }}"
openldap_data: "{{ os_openldap_paths[lsb_id].openldap_data }}"
openldap_ldapi_socket: "{{ openldap_rundir }}/ldapi"
openldap_ldapi_uri: "ldapi://{{ openldap_ldapi_socket|urlencode|replace('/','%2F') }}"

# All additional schema files needed
openldap_schema_files:
  - ae-dir.schema
  - ae-dir-session.schema
  - draft-findlay-ldap-groupofentries.schema
  - draft-stroeder-mailboxrelatedobject.schema
  - draft-stroeder-namedobject.schema
  - mspwdreset.schema
  - oath-ldap.schema
  - openssh-lpk_openldap.schema
  - stroeder.com-oid-macros.schema
  - stroeder.com.schema
  - sudoers.schema
  - autofs.schema

# Pathname of backup script
openldap_backup_script: "{{ aedir_sbin }}/ae-dir-slapcat.sh"
# Pathname where to export the LDIF data to
openldap_backup_path: "{{ openldap_data }}"
# executable and options used to compress exported LDIF data
# (set to empty string to disable compression)
openldap_backup_compressor: "xz -9"

# List of servers to be added to rootDSE attribute altServer (see RFC 4512)
openldap_rootdse_alt_servers: "{{ aedir_hosts[openldap_role] }}"

# The CA certificate file for validating the server certs
openldap_cacert_filename: "slapd-cacerts.pem"

# Suffix expected in subject-DN of server and client certs
# for authz-regexp directive and pkiUser/seeAlso attributes
openldap_tls_cert_suffix: "OU=ITS,O=Example,C=DE"

# The server certificate and key files
openldap_cert_filename: "{{ openldap_service_fqdn }}.crt"
openldap_key_filename: "{{ openldap_service_fqdn }}.key"

# local directory for fetched CSRs
local_openldap_csr_dir: "{{ playbook_dir }}/files/pki-csr-files"

# whether to overwrite existing private key
openldap_key_gen: 0

# value for slapd.conf directive TLSProtocolMin
# 3.<x> means TLSv1.<x-1>
openldap_tls_protocol_min: "3.3"

# value for slapd.conf directive TLSCipherSuite
openldap_tls_cipher_suite: "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDH-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:!ADH"

# value for parameter tls_protocol_min of slapd.conf directive 'syncrepl'
# 3.<x> means TLSv1.<x-1>
openldap_syncrepl_tls_protocol_min: "3.3"

# value for parameter tls_cipher_suite of slapd.conf directive 'syncrepl'
openldap_syncrepl_tls_cipher_suite: "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:!ADH"

# The full path names on the target system
openldap_cacert_pathname: "{{ openldap_conf_prefix }}/tls/{{ openldap_cacert_filename }}"
openldap_cert_pathname: "{{ openldap_conf_prefix }}/tls/{{ openldap_service_fqdn }}.crt"
openldap_key_pathname: "{{ openldap_conf_prefix }}/tls/{{ openldap_service_fqdn }}.key"

# for generating DH parameters for perfect forward secrecy
openldap_dhparam_pathname: "{{ openldap_conf_prefix }}/tls/slapd.dhparam"
openldap_dhparam_numbits: 2048

# subject alternative names for gen_csr.sh in OpenSSL syntax
openldap_csr_subjectaltnames:
  - "DNS:{{ openldap_service_fqdn }}"

# which messages to send to syslog
# normal for production: stats
openldap_log_level: "stats"

# how many worker threads are started
# RAM needed per thread: 4MB on 32 bit systems, 8MB on 64 bit systems
# rule-of-thumb: 4 per real CPU core
openldap_threads: 8

# Database parameters
openldap_db_accesslog_maxsize: 4000000
openldap_db_um_maxsize: 4000000
openldap_db_session_maxsize: 4000000

# keep for 23 days and scan once per day, see slapo-accesslog(5)
openldap_log_purge: "23+00:00 01+00:00"

# list of syncrepl providers used on a certain replica
openldap_syncrepl_providers: "{{ aedir_hosts['provider'] }}"

# Set to True if you are sure that your OpenLDAP installation has overlay
# slapo-noopsrch available
openldap_noopsrch_enabled: "{{ lsb_id=='SUSE' }}"

#---------------------------------------------------------------------------
# OATH-LDAP parameters
#---------------------------------------------------------------------------

# enable OATH-LDAP (with external bind listeners in slapd.conf)
# set to True to enable (default is False=disabled)
oath_ldap_enabled: False

# map slapd role to bind listener parameters
oath_dict:
  provider:
    bind_listener: hotp_validator
    user: ae-dir-otpverify
  consumer:
    bind_listener: bind_proxy
    user: ae-dir-bind-proxy

# which type of bind listener to use
oath_bind_listener: "{{ oath_dict[openldap_role].bind_listener }}"

# System user used to start bind listener
oath_listener_user: "{{ oath_dict[openldap_role].user }}"

# Directory path where Unix domain socket is created
oath_ldap_socket_dir: "{{ aedir_rundir }}/{{ oath_bind_listener }}"
# Full pathname of Unix domain socket of bind listener
# (set this to empty string for disabling the external bind listeners completely)
oath_ldap_socket_path: "{{ oath_ldap_socket_dir }}/socket"

# jinja template to use for oathenroll_cnf.py
oath_ldap_oathenroll_cnf_template: "oath-ldap/oathenroll_cnf.py.j2"

# user/group to run password self-service web application
# must be in {{ aedir_ldapi_services }}
oath_ldap_oathenroll_web_user: ae-dir-otpenroll
oath_ldap_oathenroll_web_group: ae-dir-otpenroll

#---------------------------------------------------------------------------
# web2ldap parameters
#---------------------------------------------------------------------------

# Jinja template names used
aedir_web2ldap_cnf_local: "web2ldap/web2ldapcnf/local.py.j2"
aedir_web2ldap_cnf_hosts: "web2ldap/web2ldapcnf/hosts.py.j2"
aedir_web2ldap_connect_template: "web2ldap/templates/connect.html.j2"

#---------------------------------------------------------------------------
# parameters for password services
#---------------------------------------------------------------------------

# jinja template to use for aedirpwd_cnf.py
aedirpwd_cnf_template: "aedirpwd/aedirpwd_cnf.py.j2"

# user/group to run password self-service web application
# must be in {{ aedir_ldapi_services }}
aedirpwd_web_user: ae-dir-pwd
aedirpwd_web_group: ae-dir-pwd

#---------------------------------------------------------------------------
# SMTP parameters
#---------------------------------------------------------------------------

# SMTP server used as smart host (SMTP relay)
# query string of URL may contain two more parameters:
# STARTTLS: Send STARTTLS (see also config parameter SMTP_TLSARGS)
# VIA: Use this hostname or IP address for connection
#SMTP_URL = 'smtp://user:password@mail-relay.example.com/?STARTTLS&VIA=mail-relay-othername.example.com'
smtp_relay_url: "smtp://smtp.example.com:587/?STARTTLS"

# from address to be used when sending e-mails
smtp_admin_address: "ae-admins@{{ openldap_service_fqdn }}"

# from address to be used when sending e-mails
smtp_from_address: "{{ smtp_admin_address }}"

# The CA certificate file bundle for sending e-mail via SMTP/STARTTLS
smtp_cacert_filename:  "{{ openldap_cacert_filename }}"

# The CA certificate file for sending e-mail via SMTP/STARTTLS
smtp_cacert_pathname: "{{ aedir_etc }}/{{ smtp_cacert_filename }}"

#---------------------------------------------------------------------------
# Parameters for monitoring script
#---------------------------------------------------------------------------

# directory where to install slapd_check.sh
slapd_checkmk_local: /usr/lib/check_mk_agent/local

# path name of slapd's Unix Domain Socket for LDAPI
slapd_check_ldapi_socket: ""
# example for LTB's OpenLDAP builds
#slapd_check_ldapi_socket: "/usr/local/openldap/var/run/ldapi"

# local LDAPI URI for reading config and monitor contexts
slapd_check_ldapi_uri: "ldapi://{{ slapd_check_ldapi_socket|urlencode|replace('/','%2F') }}"

# fully-qualified domain name of local LDAPS service
slapd_check_service_fqdn: "{{ ansible_fqdn }}"

# local LDAPS URI
slapd_check_ldaps_uri: "ldaps://{{ slapd_check_service_fqdn }}"

# expected authz-ID for local LDAPS connection
# very likely you have to adjust this one
slapd_check_authz_id: "dn:uid=slapd_{{ slapd_check_service_fqdn.split('.')[0] }},dc=example,dc=com"

# pathnames to add to LD_LIBRARY_PATH
slapd_check_lib_dirs:
  # for LTB's openLDAP builds
  - /usr/local/openldap/lib64

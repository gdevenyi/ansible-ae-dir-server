---
# defaults file for roles/ae-dir

#---------------------------------------------------------------------------
# general ansible arguments
#---------------------------------------------------------------------------

# Directories to search for Jinja2 templates (used by with_first_found)
aedir_templates_dirs:
  - "{{ inventory_dir }}/templates/{{role_path|basename}}"
  - "{{ playbook_dir }}/templates/{{role_path|basename}}"
  - "{{ inventory_dir }}/templates"
  - "{{ playbook_dir }}/templates"
  - "{{ role_path }}/templates"

# Directories to search for files (used by with_first_found)
aedir_files_dirs:
  - "{{ inventory_dir }}/files/{{role_path|basename}}"
  - "{{ playbook_dir }}/files/{{role_path|basename}}"
  - "{{ inventory_dir }}/files"
  - "{{ playbook_dir }}/files"
  - "{{ role_path }}/files"

#---------------------------------------------------------------------------
# pip install arguments
#---------------------------------------------------------------------------

aedir_pip_index_url: "https://pypi.python.org/simple"

aedir_pip_needs_compiler: "{{ aedir_pip_index_url == 'https://pypi.python.org/simple' }}"

aedir_pip_install_options:
  - "--upgrade"
  - "--index-url {{ aedir_pip_index_url }}"

aedir_pip_extra_args: "{{ aedir_pip_install_options|join(' ') }}"

#---------------------------------------------------------------------------
# AE-DIR parameters
#---------------------------------------------------------------------------

# LSB id to be used during plays
lsb_id: "{{ lsb_id_map.get(ansible_lsb.id,ansible_lsb.id) }}"

# override service manager fact (e.g. for docker build)
aedir_service_manager: "{{ ansible_service_mgr }}"

# Perform init tasks: set to True only on the command-line when
# initializing an empty AE-DIR environment from scratch
aedir_init: False

# base DN / search root / naming context for AE-DIR entries
# Note: Do yourself a favour and keep it short ;-)
aedir_suffix: "ou=ae-dir"

# base DN / search root for accesslog entries
aedir_accesslog_suffix: "cn=accesslog-ae-dir"

# base DN / search root for session entries
aedir_session_suffix: "cn=ae-session"

# POSIX-GID number range served by AE-DIR
aedir_min_gid: 30000
aedir_max_gid: 59999

# POSIX-UID number range served by AE-DIR
aedir_min_uid: "{{ aedir_min_gid }}"
aedir_max_uid: "{{ aedir_max_gid }}"

# Parameters for generating user names
aedir_username_length: 4
aedir_username_gen_trials: 15
# Parameters for checking user names
aedir_username_minlen: "{{ aedir_username_length }}"
aedir_username_maxlen: "{{ aedir_username_length }}"

# Some paths for tools
aedir_prefix: "/opt/ae-dir"
aedir_bin: "{{ aedir_prefix }}/bin"
aedir_sbin: "{{ aedir_prefix }}/sbin"
aedir_etc: "{{ aedir_prefix }}/etc"
aedir_etc_openldap: "{{ aedir_etc }}/openldap"
aedir_rundir: "{{ aedir_prefix }}/run"
aedir_python_sitepackages: "{{ aedir_prefix }}/lib/python2.7/site-packages"

# where to install systemd files
aedir_systemd_dir: "/etc/systemd/system"

# which Python interpreter to use
aedir_python: "{{ aedir_platform_python[lsb_id] }} -ROO"

# regex patterns for enforcing naming conventions (substring match!)
# Important notes:
# - patterns are also used as substrings of more complex patterns => do not enclose in ^ and $
# - you should only *relax* patterns for an existing deployment with existing entries!
# attribute 'cn'
aedir_aezone_cn_regex: "[a-z0-9]+"
aedir_aegroup_cn_regex: "{{ aedir_aezone_cn_regex }}-[a-z0-9-]+"
aedir_aetag_cn_regex: "{{ aedir_aegroup_cn_regex }}"
aedir_aesudorule_cn_regex: "{{ aedir_aegroup_cn_regex }}"
aedir_aesrvgroup_cn_regex: "{{ aedir_aegroup_cn_regex }}"
# attribute 'serialNumber'
aedir_aeauthctoken_serial_regex: "[a-z0-9_-]+"
# attribute 'uid'
aedir_aeuser_uid_regex: "[a-z]{{ '{' }}{{ aedir_username_minlen }},{{ aedir_username_maxlen }}{{ '}' }}"
aedir_aeservice_uid_regex: "[a-zA-Z0-9_.-]+"
# attribute 'aeTicketId'
aeticketid_regex: "[A-Z]+-[0-9]+"
# for entries beneath cn={{ aedir_org_zone }}
aedir_aeperson_uniqueid_regex: "[a-zA-Z0-9_.:/-]+"
aedir_aelocation_cn_regex: "[a-zA-Z0-9_.:/-]+"
aedir_aedept_deptnumber_regex: "[a-zA-Z0-9_.:/-]+"
# special regex policy rules for SSH public keys
# e.g. for specifying algorithms or naming conventions for key comment
aedir_aeservice_sshpubkey_regex: "(ssh-rsa|ecdsa-sha2-nistp256|ecdsa-sha2-nistp384|ecdsa-sha2-nistp521|ssh-ed25519) [A-Za-z0-9+=/]+ .+"
aedir_aeuser_sshpubkey_regex: "(ssh-rsa|ecdsa-sha2-nistp256|ecdsa-sha2-nistp384|ecdsa-sha2-nistp521|ssh-ed25519) [A-Za-z0-9+=/]+ .+"

# List of possible SSH key permissions/option values in
# attribute 'aeSSHPermissions'
# Note:
# The client (SSH-CA or Unixoid system) has to decide which options are
# enabled in case of empty set
aedir_sshkey_perms:
  - pty
  - X11-forwarding
  - agent-forwarding
  - port-forwarding
  - user-rc

# all valid directory prefixes for attribute 'homeDirectory'
# but without trailing slash
aedir_homedirectory_prefixes:
  - "/home"
#  - "/Users"

# magic value which make homeDirectory attribute invisible
aedir_homedirectory_hidden: "-/-"

# available values for attribute 'loginShell'
aedir_login_shells:
  - /bin/bash
  - /bin/true
  - /bin/false

# ticket identifier of initial ldapadd
aedir_init_ticket_id: "INIT-42"

# who clause for set-based ACL determining visibility of IP address
# attributes for hosts map
# 1. only aeHost can see own network devices
aedir_aenwdevice_visibility_set: "user & this/-1"
# 2. only aeHost beneath same aeSrvGroup can see host's  network devices
#aedir_aenwdevice_visibility_set: "user/-1 & this/-2"
# 3. only aeHost within same aeZone can see host's  network devices
#aedir_aenwdevice_visibility_set: "user/-2 & this/-3"

# Usernames and POSIX-UID/-GID numbers for system accounts of services
# running on providers and accessing AE-DIR via LDAPI
# Important notes:
# - uid_number/gid_number should be outside aedir_min_uid/aedir_max_uid range defined above
# - user names must match aedir_aeservice_uid_regex pattern defined above
# - do not remove items after initializing a AE-DIR deployment
# - special care needed for usernames used in OpenLDAP ACLs

aedir_ldapi_services:
  # system user for password self-service web application
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-pwd:
    cn: Password self-service application
    uid_number: "{{ aedir_min_gid-1 }}"
    gid_number: "{{ aedir_min_gid-1 }}"
    description: The system user allowed to set attributes during user password reset (msPwdResetObject) over LDAPI
    home_directory: "{{ aedir_rundir }}/ae-dir-pwd"
    roles:
      - provider
  # system user for sync processes
  ae-dir-peoplesync:
    cn: Personnel data sync process
    uid_number: "{{ aedir_min_gid-2 }}"
    gid_number: "{{ aedir_min_gid-2 }}"
    description: The system user allowed to maintain aePerson entries over LDAPI
    home_directory: "{{ aedir_rundir }}/ae-dir-peoplesync"
    roles:
      - provider
  # system user for OTP registration/enrollment web application
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-otpenroll:
    cn: 2FA enrollment application
    uid_number: "{{ aedir_min_gid-3 }}"
    gid_number: "{{ aedir_min_gid-3 }}"
    description: The system user allowed to init OATH token entries over LDAPI
    roles:
      - provider
  # system user for OTP verification listener
  # uid is referenced in OpenLDAP ACLs!
  ae-dir-otpverify:
    cn: OATH-LDAP validator demon
    uid_number: "{{ aedir_min_gid-4 }}"
    gid_number: "{{ aedir_min_gid-4 }}"
    description: The system user allowed to read shared secrets (OATH-LDAP)
    roles:
      - provider
  # system user for bind proxy listener
  ae-dir-bind-proxy:
    cn: OATH-LDAP bind proxy
    uid_number: "{{ aedir_min_gid-5 }}"
    gid_number: "{{ aedir_min_gid-5 }}"
    description: The system user used for simple bind proxy
    roles:
      - consumer
  # system user for WebSSO component
  ae-dir-web-sso:
    cn: WebSSO component
    uid_number: "{{ aedir_min_gid-6 }}"
    gid_number: "{{ aedir_min_gid-6 }}"
    description: The system user used for WebSSO
    roles:
      - provider
  # system user for PASSMOD listener
  ae-dir-pwsync:
    cn: Password sync listener
    uid_number: "{{ aedir_min_gid-7 }}"
    gid_number: "{{ aedir_min_gid-7 }}"
    description: The system user allowed to intercept password changes and set password
    roles:
      - provider
  # system user which must match UID/GID OpenLDAP's slapd service is running as
  ae-dir-slapd:
    cn: OpenLDAP slapd demon user
    uid_number: "{{ aedir_min_gid-8 }}"
    gid_number: "{{ aedir_min_gid-8 }}"
    description: The system user for running OpenLDAP server process (slapd)
    roles:
      - provider
      - consumer
  # system user which must match UID/GID Apache service is running as
  ae-dir-httpd:
    cn: Web server demon user
    uid_number: "{{ aedir_min_gid-9 }}"
    gid_number: "{{ aedir_min_gid-9 }}"
    description: The system user for running Apache server process (httpd)
    roles:
      - provider
  # system user for running web2ldap instance under control of uwsgi
  ae-dir-web2ldap:
    cn: web2ldap demon user
    uid_number: "{{ aedir_min_gid-10 }}"
    gid_number: "{{ aedir_min_gid-10 }}"
    description: The system user for running web2ldap service process
    roles:
      - provider

# POSIX UID and GID which is mapped to rootdn
aedir_rootdn_uid_number: 0
aedir_rootdn_gid_number: 0

# which zone to use for aePerson and aeDept entries
# (must be listed in aedir_init_aezones below)
aedir_org_zone: people

# which zone to use for primary aeUser entries
# (must be listed in aedir_init_aezones below)
aedir_base_zone: base

# List of aeZone entries to be added to ae-dir-base.ldif
aedir_init_aezones:
  people:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "People and department entries"
  base:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "Primary office users and groups"
  otp:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "OTP tokens (OATH-LDAP)"
  test:
    ticket_id: "{{ aedir_init_ticket_id }}"
    description: "Testing playground"

# List of aePerson entries to be added to ae-dir-base.ldif
aedir_init_aepersons:
  INIT-PERSON-ID-42:
    given_name: Michael
    sur_name: Ströder
    mail: michael@stroeder.com

# List of aeUser entries to be added to ae-dir-base.ldif
# - user names must match aedir_aeservice_uid_regex pattern defined above
# - unique_identifier has to be an entry in aedir_init_aepersons
aedir_init_aeadmins:
  - uid: msin
    unique_identifier: INIT-PERSON-ID-42
    description: initial Æ-DIR admin
    ticket_id: "{{ aedir_init_ticket_id }}"

aedir_hosts:
  # inventory host names of *all* provider hosts
  provider: "{{ groups['ae-dir-providers'] }}"
  # inventory host names of *all* consumer hosts
  consumer: "{{ groups['ae-dir-consumers'] }}"

# main provider hostname (e.g. for HA setups)
aedir_main_provider_hostname: "{{ aedir_hosts.provider[0] }}"

# aePerson attributes only readable by zone admins/auditors of people zone
aedir_confidential_person_attrs:
  - employeeNumber
  - aeNotBefore
  - aeNotAfter

# aePerson attributes readable by all base users
aedir_public_person_attrs:
  - cn
  - sn
  - givenName
  - mail
  - userCertificate

# Specifies whether a AE-DIR instance should send e-mail notifications to users or not
aedir_user_mail_enabled: "{{ aedir_hosts.provider[0]==ansible_fqdn }}"

# some stupid LDAP clients insist on searching user or group entries in
# separate container trees beneath the separately configured search root
# => always map to {{ aedir_suffix }}
#aedir_fake_search_roots:
#  - "ou=users"
#  - "ou=groups"
aedir_fake_search_roots: []

# base names with extension of web pages installed to DocumentRoot
aedir_htdocs_templates:
  - ae-dir
  - apps
  - bcp
  - cli
  - demo
  - docs
  - faq
  - fun
  - install
  - oath
  - pwd
  - python
  - todo
  - user
  - web2ldap

# relative filename of Jinja2 base layout template for all web pages
aedir_htdocs_layout: "layout.html.j2"

# If non-empty this triggers installation and pre-loading of alternative
# malloc lib in all systemd unit files for all services.
# Example for using jemalloc on Debian Jessie:
# aedir_malloc_package: "libjemalloc1"
# aedir_malloc_ld_preload: "/usr/lib/x86_64-linux-gnu/libjemalloc.so.1"
aedir_malloc_package: ""
aedir_malloc_ld_preload: ""

# Default values for attribute 'aeExpiryStatus' in LDIF templates
# key is the structural object class
# Example:
# ae_expiry_status_defaults:
#     aeUser: 1
#     aeGroup: 1
#     aeService: 1
ae_expiry_status_defaults: {}

# Enforce uwsgi to bind to TCP sockets instead of Unix domain sockets
# mainly needed for Debian Jessie
aedir_uwsgi_usetcp: "{{ lsb_id == 'Debian' and ansible_distribution_release == 'jessie' }}"

# some uwsgi parameters per service
aedir_uwsgi_params:
  web2ldap:
    buffer_size: 16384
    harakiri: 20
  oathenroll:
    buffer_size: 8192
    harakiri: 10
  aedirpwd:
    buffer_size: 8192
    harakiri: 10

#---------------------------------------------------------------------------
# OpenLDAP parameters
#---------------------------------------------------------------------------

# replica role, must be either 'provider' or 'consumer'
openldap_role: "consumer"

# which repo to use for LTB OpenLDAP builds (Debian and RHEL/CentOS)
ltb_openldap_repo_source: "{{ ltb_openldap_repo[lsb_id] }}"

# default FQDN in LDAP service URL
openldap_service_fqdn: "{{ inventory_hostname }}"

# Some paths
openldap_prefix: "{{ os_openldap_paths[lsb_id].openldap_prefix }}"
openldap_bin: "{{ openldap_prefix }}/bin"
openldap_conf_prefix: "{{ os_openldap_paths[lsb_id].openldap_conf_prefix }}"
openldap_schema_prefix: "{{ openldap_conf_prefix }}/schema"
openldap_sbin: "{{ openldap_prefix }}/sbin"
openldap_defaults: "/etc/default/slapd"
openldap_rundir: "{{ aedir_rundir }}/slapd"
openldap_data: "{{ aedir_prefix }}/slapd-db"
openldap_ldapi_socket: "{{ openldap_rundir }}/ldapi"
openldap_ldapi_uri: "ldapi://{{ openldap_ldapi_socket|urlencode|replace('/','%2F') }}"
# where to place static config file for slapd (slapd.conf)
openldap_slapd_conf: "{{ aedir_etc_openldap }}/slapd.conf"
# where to find slapd executable
openldap_slapd_exec: "{{ os_openldap_paths[lsb_id].openldap_slapd_exec }}"
# URIs specifying on which interface slapd shall listen
openldap_listen_urls: "{{ openldap_ldapi_uri|replace('%','%%') }} ldap://*:389 ldaps://*:636"
# system user/group to run slapd with
openldap_slapd_user: "ae-dir-slapd"
openldap_slapd_group: "ae-dir-slapd"
# syslog(3) parameters used for slapd's logging
openldap_syslog_facility: "LOCAL4"
openldap_syslog_level: "7"

aedir_schema_prefix: "{{ openldap_slapd_conf|dirname }}/schema"

# All additional schema files needed
openldap_schema_files:
  - ae-dir.schema
  - ae-dir-session.schema
  - draft-findlay-ldap-groupofentries.schema
  - draft-stroeder-mailboxrelatedobject.schema
  - draft-stroeder-namedobject.schema
  - mail.schema
  - mspwdreset.schema
  - oath-ldap.schema
  - openssh-lpk_openldap.schema
  - stroeder.com-oid-macros.schema
  - stroeder.com.schema
  - sudoers.schema
  - autofs.schema

# Pathname of backup script
openldap_backup_script: "{{ aedir_sbin }}/ae-dir-slapcat.sh"
# Pathname where to export the LDIF data to
openldap_backup_path: "{{ openldap_data }}"
# executable and options used to compress exported LDIF data
# (set to empty string to disable compression)
openldap_backup_compressor: "xz -9"
# maximum number of days to keep local backup files
openldap_backup_max_days: 21

# List of servers to be added to rootDSE attribute altServer (see RFC 4512)
openldap_rootdse_alt_servers: "{{ aedir_hosts[openldap_role] }}"

# The CA certificate file for validating the server certs
openldap_cacert_filename: "ca-chain.pem"

# Suffix expected in subject-DN of server and client certs
# for authz-regexp directive and pkiUser/seeAlso attributes
# Must match values in gen_csr.cnf.j2
openldap_tls_cert_suffixes:
  - "ou=Edit OU,o=Edit O,l=Edit L,st=Edit ST,c=CO"

# The server certificate and key files (absolute path names on local controller!)
openldap_cert_filename: "{{ inventory_dir }}/files/{{ openldap_service_fqdn }}.crt"
openldap_key_filename: "{{ inventory_dir }}/files/{{ openldap_service_fqdn }}.key"

# local directory for fetched CSRs
local_openldap_csr_dir: "{{ inventory_dir }}/files/pki-csr-files"

# whether to overwrite existing server's private key
openldap_keygen: 0

# value for slapd.conf directive TLSProtocolMin
# 3.<x> means TLSv1.<x-1>
openldap_tls_protocol_min: "3.3"

# value for slapd.conf directive TLSCipherSuite
openldap_tls_cipher_suite: "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDH-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:!ADH"

# value for parameter tls_protocol_min of slapd.conf directive 'syncrepl'
# 3.<x> means TLSv1.<x-1>
openldap_syncrepl_tls_protocol_min: "3.3"

# value for parameter tls_cipher_suite of slapd.conf directive 'syncrepl'
openldap_syncrepl_tls_cipher_suite: "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:!ADH"

# The full path names on the target system
openldap_cacert_pathname: "{{ aedir_etc }}/tls/{{ openldap_cacert_filename|basename }}"
openldap_cert_pathname: "{{ aedir_etc }}/tls/{{ openldap_cert_filename|basename }}"
openldap_key_pathname: "{{ aedir_etc }}/tls/{{ openldap_key_filename|basename }}"

# for generating DH parameters for perfect forward secrecy
openldap_dhparam_pathname: "{{ aedir_etc }}/tls/slapd.dhparam"
openldap_dhparam_numbits: 2048

# password hashing scheme
# see https://tools.ietf.org/html/draft-stroeder-hashed-userpassword-values
openldap_password_hash: "{CRYPT}"
# SHA-512, 72 bits of salt, 5000 iterations (see crypt(3) man page)
openldap_password_crypt_salt_format: "$6$%.12s"

# subject alternative names for gen_csr.sh in OpenSSL syntax
openldap_csr_subjectaltnames:
  - "DNS:{{ openldap_service_fqdn }}"

# which messages to send to syslog
# normal for production: stats
openldap_log_level: "stats"

# timeout parameters (secs) for syncrepl described in slapd.conf(5)
openldap_syncrepl_network_timeout: 5
openldap_syncrepl_timeout: 5

# Maximum number of pending requests for anonymous sessions
openldap_conn_max_pending: 100

# Maximum number of pending requests for authenticated sessions
openldap_conn_max_pending_auth: 1000

# how many listener threads are started (should be power of 2)
# rule-of-thumb: 1 for up to 16 cores
openldap_listener_threads: 1

# how many worker threads are started
# RAM needed per thread: 4MB on 32 bit systems, 8MB on 64 bit systems
# rule-of-thumb: 4 per real CPU core
openldap_threads: 8

# Database parameters
openldap_db_accesslog_maxsize: 4000000
openldap_db_um_maxsize: 4000000
openldap_db_session_maxsize: 4000000

# keep for 23 days and scan once per day, see slapo-accesslog(5)
openldap_log_purge: "23+00:00 01+00:00"

# list of syncrepl providers used on a certain replica
openldap_syncrepl_providers: "{{ aedir_hosts['provider'] }}"

#---------------------------------------------------------------------------
# password sync parameters
#---------------------------------------------------------------------------

# Target URL for password synchronisation
# If non-empty this enables password clear-text syncing (rarely needed)
# Example:
# aedir_pwsync_targeturl: "ldaps://msad.example.com/dc=example,dc=org?samaccountname,unicodePwd?sub??bindname=dom-admin@example.com"
aedir_pwsync_targeturl: ""

# regex pattern for limiting the entries for which password changes are exported
# Example: Restrict syncing passwords to aeUser and aeService entries within zones "base" and "test"
# aedir_pwsync_dn_regex: "^uid=({{ aedir_aeuser_uid_regex }}|{{ aedir_aeservice_uid_regex }}),cn=(base|test),{{ aedir_suffix }}$"
aedir_pwsync_dn_regex: ""

# password of authenticating to sync target (should be ansible vault or similar)
aedir_pwsync_targetpassword: ""

# The CA certificate file bundle for connecting to sync target
aedir_pwsync_cacert_filename:  "{{ openldap_cacert_filename }}"

# The CA certificate file bundle for connecting to sync target
aedir_pwsync_cacert_pathname: "{{ aedir_etc }}/passmod/{{ aedir_pwsync_cacert_filename|basename }}"

# pathname of file containing target's password
aedir_pwsync_targetpwfile: "{{ aedir_etc }}/passmod/target_pw"

# user account for running external PASSMOD listener
aedir_pwsync_listener_user: ae-dir-pwsync

# Directory path where Unix domain socket is created
aedir_pwsync_socket_dir: "{{ aedir_rundir }}/passmod"
# Full pathname of Unix domain socket of bind listener
# (set this to empty string for disabling the external bind listeners completely)
aedir_pwsync_socket_path: "{{ aedir_pwsync_socket_dir }}/socket"

# list of HTML snippets to be put as news on the entry web page
aedir_news: []

#---------------------------------------------------------------------------
# OATH-LDAP parameters
#---------------------------------------------------------------------------

# enable OATH-LDAP (with external bind listeners in slapd.conf)
# set to True to enable (default is False=disabled)
oath_ldap_enabled: False

# regex pattern for limiting the entries for which bind requests
# are sent to external OATH-LDAP listener
# Note:
# This needs OpenLDAP built with ITS#8051 in otherwise slapd won't start!
# If in doubt leave empty.
#oath_ldap_dn_regex: "^uid=({{ aedir_aeuser_uid_regex }}),cn=({{ aedir_aezone_cn_regex }}),{{ aedir_suffix }}$"
oath_ldap_dn_regex: ""

# map slapd role to bind listener parameters
oath_dict:
  provider:
    bind_listener: hotp_validator
    user: ae-dir-otpverify
  consumer:
    bind_listener: bind_proxy
    user: ae-dir-bind-proxy

# which type of bind listener to use
oath_bind_listener: "{{ oath_dict[openldap_role].bind_listener }}"

# System user used to start bind listener
oath_listener_user: "{{ oath_dict[openldap_role].user }}"

# Directory path where Unix domain socket is created
oath_ldap_socket_dir: "{{ aedir_rundir }}/{{ oath_bind_listener }}"
# Full pathname of Unix domain socket of bind listener
# (set this to empty string for disabling the external bind listeners completely)
oath_ldap_socket_path: "{{ oath_ldap_socket_dir }}/socket"

# user/group to run password self-service web application
# must be in {{ aedir_ldapi_services }}
oath_ldap_oathenroll_web_user: ae-dir-otpenroll
oath_ldap_oathenroll_web_group: ae-dir-otpenroll

#---------------------------------------------------------------------------
# parameters for password services
#---------------------------------------------------------------------------

# user/group to run password self-service web application
# must be in {{ aedir_ldapi_services }}
aedirpwd_web_user: ae-dir-pwd
aedirpwd_web_group: ae-dir-pwd

#---------------------------------------------------------------------------
# SMTP parameters
#---------------------------------------------------------------------------

# SMTP server used as smart host (SMTP relay)
# query string of URL may contain two more parameters:
# STARTTLS: Send STARTTLS (see also config parameter SMTP_TLSARGS)
# VIA: Use this hostname or IP address for connection
#smtp_relay_url: "smtp://user:password@mail-relay.example.com/?STARTTLS&VIA=mail-relay-othername.example.com"
#smtp_relay_url: "smtp://127.0.0.1"
#smtp_relay_url: "smtp://smtp.example.com:587/?STARTTLS"
smtp_relay_url: "smtp://smtp.example.com:587/?STARTTLS"

# from address to be used when sending e-mails
smtp_admin_address: "ae-admins@{{ openldap_service_fqdn }}"

# from address to be used when sending e-mails
smtp_from_address: "{{ smtp_admin_address }}"

# The CA certificate file bundle for sending e-mail via SMTP/STARTTLS
smtp_cacert_filename:  "{{ openldap_cacert_filename }}"

# The CA certificate file for sending e-mail via SMTP/STARTTLS
smtp_cacert_pathname: "{{ aedir_etc }}/{{ smtp_cacert_filename|basename }}"

#---------------------------------------------------------------------------
# CRON parameters
#---------------------------------------------------------------------------

cron_service_name: "{{ cron_config[lsb_id].service_name }}"

cron_pkg_name: "{{ cron_config[lsb_id].pkg_name }}"

#---------------------------------------------------------------------------
# Parameters for monitoring script
#---------------------------------------------------------------------------

# directory where to install slapd_check.sh
# Probably there's no check_mk agent installed, so set other dir as default
slapd_checkmk_local: "{{ aedir_sbin }}"

# fully-qualified domain name of local LDAPS service
slapd_check_service_fqdn: "{{ ansible_fqdn }}"

# local LDAPS URI
slapd_check_ldaps_uri: "ldaps://{{ slapd_check_service_fqdn }}"

# expected authz-ID for local LDAPS connection
# very likely you have to adjust this one
slapd_check_authz_id: "dn:uid=slapd_{{ slapd_check_service_fqdn.split('.')[0] }},dc=example,dc=com"

# pathnames to add to LD_LIBRARY_PATH
slapd_check_lib_dirs:
  # for LTB's openLDAP builds
  - /usr/local/openldap/lib64

#---------------------------------------------------------------------------
# web server in general
#---------------------------------------------------------------------------

# Which web server to install
web_server: "{{ apache2_config[lsb_id].service_name }}"

# FQDN of service interface
web_service_fqdn: "{{ inventory_hostname }}"

# e-mail address of web server admin(s)
web_server_admin_email: "web2ldap-admin@example.com"

# document root used for https://hostname/
web_document_root: "{{ aedir_prefix }}/htdocs"

#---------------------------------------------------------------------------
# web2ldap parameters
#---------------------------------------------------------------------------

web2ldap_monitor_access_allowed:
  - 127.0.0.0/255.0.0.0
  - ::1
  - fe00::0
#  - 10.0.0.0/255.0.0.0
#  - 0.0.0.0/0.0.0.0
#  - ::0

# user/group to run as
web2ldap_user: "ae-dir-web2ldap"
web2ldap_group: "ae-dir-web2ldap"

#---------------------------------------------------------------------------
# apache2 parameters
#---------------------------------------------------------------------------

# where to place static config file for slapd (slapd.conf)
#apache_conf: "{{ apache2_config[lsb_id].conf_pathname }}"
apache_conf: "{{ aedir_etc }}/apache2.conf"

# directory used as rundir (for PID etc.)
apache_rundir: "{{ aedir_rundir }}/apache"

# PID filename of Apache
apache_pid_file: "{{ apache_rundir }}/apache.pid"

# system user/group to run web server with
apache_user: "ae-dir-httpd"
apache_group: "ae-dir-httpd"

# Apache ErrorLog value
apache_error_log: "syslog:daemon"
#apache_error_log: "{{ apache2_config[lsb_id].log_dir }}/error.log"

# Apache accesslog file
apache_access_log: "{{ apache2_config[lsb_id].log_dir }}/ae-dir-{{ openldap_role }}.log"

# Apache LogLevel value
apache_log_level: "info"

# see https://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats
apache_log_format: !unsafe '{ \"time\":\"%{%Y-%m-%dT%H:%M:%S%z}t\", \"ip\":\"%h\", \"url\":\"%U\", \"query\":\"%q\", \"method\":\"%m\", \"status\":\"%>s\", \"ua\":\"%{User-agent}i\", \"ref\":\"%{Referer}i\", \"reqid\":\"%L\", \"in\":%I, \"out\":%O, \"rbody\":%B, \"etime\":%D, \"tls_proto\":\"%{SSL_PROTOCOL}x\", \"tls_cipher\":\"%{SSL_CIPHER}x\" }'

# Apache ServerAdmin value
apache_server_admin: "{{ web_server_admin_email }}"

# which IP nets are allowed to access web2ldap
apache_web2ldap_requires:
  - "ip 127.0.0.1"
  - "ip ::1"
  - "ip 10.0.0.0/255.0.0.0"

# Apache TLS parameters
apache_ssl_protocol: "+TLSv1.2"
apache_ssl_cipher_suite: 'ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:!RC4-SHA:!MEDIUM:!ADH:!LOW:!EXP:!NULL'

# Path name of CA cert bundle file
apache_cacert_filename: "{{ openldap_cacert_filename }}"

# The server certificate and key files
apache_cert_filename: "{{ openldap_cert_filename }}"
apache_key_filename: "{{ openldap_key_filename }}"
# The full path names on the target system
apache_cacert_pathname: "{{ openldap_cacert_pathname }}"
apache_cert_pathname: "{{ openldap_cert_pathname }}"
apache_key_pathname: "{{ openldap_key_pathname }}"

#---------------------------------------------------------------------------
# AppArmor parameters
#---------------------------------------------------------------------------

# set to True to enable mandatory access control with AppArmor
apparmor_enabled: False

# where custom AppArmor profiles are stored
apparmor_profiles_dir: "/etc/apparmor.d"
